[{"authors":["Ben"],"categories":null,"content":"I am an Assistant Professor at Michigan State University in the Department of Economics and a faculty affiliate in the Social Science Data Analytics Program. Prior to coming to MSU, I was a Postdoctoral Research Fellow at Harvard University and a Visiting Scholar at Harvard Business School. My research focuses on the intersection of psychology and economics \u0026ndash; also known as behavioral economics \u0026ndash; and has appeared in the American Economic Review and Neuron. Prior to coming to Michigan State University, I worked with the U.S. Army to help soldiers become more psychologically resilient.\nI hold a Ph.D. in Social Science (Economics) from the California Institute of Technology (Caltech), and a B.S. in Economics from the University of Oregon.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1629137504,"objectID":"bf008f22d9b0754cde4f6972811c28b7","permalink":"https://ec404.netlify.app/authors/ben/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/ben/","section":"authors","summary":"I am an Assistant Professor at Michigan State University in the Department of Economics and a faculty affiliate in the Social Science Data Analytics Program. Prior to coming to MSU, I was a Postdoctoral Research Fellow at Harvard University and a Visiting Scholar at Harvard Business School. My research focuses on the intersection of psychology and economics \u0026ndash; also known as behavioral economics \u0026ndash; and has appeared in the American Economic Review and Neuron.","tags":null,"title":"Ben Bushong","type":"authors"},{"authors":null,"categories":null,"content":"  Each week has a set of required readings that you should complete before coming to the (online) Tuesday lecture. That is, you should complete the reading, attend Tuesday class, then do the associated “exercises” (contained within the reading) before Thursday. You will be working each week’s lab between Thursday afternoon and Monday at 11:59 PM (when the labs are due). Don’t forget your weekly writing in between, due Saturday at 11:59pm.\nThe course content is structured as follows. For each topic, we begin with a set of questions that might guide your reading and help frame your thoughts. These questions can serve as helpful starting places for your thinking; they are not representative of the totality of the content and are not intended to be limiting. You should not try to respond to all of these (or any of them if you don’t want to)—they’ll just help you know what to look for and think about as you read.\nAll lecture videos are posted to our SSC442 channel on Mediaspace .\n","date":1598918400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1629137504,"objectID":"1413f960ec974b9863bc45d887efa8bd","permalink":"https://ec404.netlify.app/content/","publishdate":"2020-09-01T00:00:00Z","relpermalink":"/content/","section":"content","summary":"Each week has a set of required readings that you should complete before coming to the (online) Tuesday lecture. That is, you should complete the reading, attend Tuesday class, then do the associated “exercises” (contained within the reading) before Thursday. You will be working each week’s lab between Thursday afternoon and Monday at 11:59 PM (when the labs are due). Don’t forget your weekly writing in between, due Saturday at 11:59pm.","tags":null,"title":"Readings, lectures, and videos","type":"docs"},{"authors":null,"categories":null,"content":"   Weekly Writings  Weekly Writing Template  Labs Projects Final project   This course is the capstone of the Data Analytics Minor in the College of Social Science. Accordingly, you should—fingers crossed—enjoy data analysis. You will get the most of out this class if you:\nEngage with the readings and lecture materials Regularly use R (aka engage daily or almost every day in some way)  Each type of assignment in this class helps with one of these strategies.\nDownload and save the following files (right-click to Save Link As…)\n  Weekly writing template\n  Lab assignment template\n  Weekly Writings To encourage you to actively engage with the course content, you will write a ≈150 word memorandum about the reading or lecture each week. That’s fairly short: there are ≈250 words on a typical double-spaced page. You must complete eleven of these in the course. I will drop your one lowest weekly writing score. Your actual prompt will be assigned in class, so you must login each day to ensure you get these assignments. To keep you on your toes, we will vary whether these are assigned on Tuesdays or Thursdays. Each week’s weekly writing will be due on D2L by 11:59pm on Saturday\nYou can do a lot of different things with this memo: discuss something you learned from the course content, write about the best or worst data visualization you saw recently, connect the course content to your own work, etc. These reflections let you explore and answer some of the key questions of this course, including:\n When is a link correlational vs causal? How can we still make useful statements about non-causal things? Why do we visualize data? What makes a great data analysis? What makes a bad analysis? How do you choose which kind of analysis method to use? What is the role of the data structure in choosing an analysis? Can we be flexible?  The course content for each day will also include a set of questions specific to that topic. You do not have to answer all (or any) of these questions. That would be impossible. They exist to guide your thinking and to make complex reading more digestible. The specific topic for each week will be assigned in class. (We can’t emphasize this enough.)\nThe TA will grade these mini-exercises using a very simple system:\n ✔+: (11.5 points (115%) in gradebook) Work shows phenomenal thought and engagement with the course content. We will not assign these often. ✔: (10 points (100%) in gradebook) Work is thoughtful, well-written, and shows engagement with the course content. This is the expected level of performance. ✔−: (5 points (50%) in gradebook) Work is hastily composed, too short, and/or only cursorily engages with the course content. This grade signals that you need to improve next time. I will hopefully not assign these often.  (There is an implicit 0 above for work that is not turned in by Saturday at 11:59pm). Notice that this is essentially a pass/fail or completion-based system. We’re not grading your writing ability; we’re not counting the exact number of words you’re writing; and we’re not looking for encyclopedic citations of every single reading to prove that you did indeed read everything. We are looking for thoughtful engagement. Read the material, engage with the work and you’ll get a ✓.\nWeekly Writing Template You will turn these reflections in via D2L. You will write them using R Markdown and this weekly writing template (right-click to Save Link As…) . You must knit your work to a PDF document (this will be what you turn in). D2L will have eleven weekly writing assignments available. Upload your first weekly writing assignment to number 1, your second (regardless of which week you are writing on) to number 2, etc.\n  Labs Each week of the course has fully annotated examples of code that teach and demonstrate how to do specific tasks in R. However, without practicing these principles and making graphics on your own, you won’t remember what you learn.\nPlease do not do labs ahead of time. I am updating the assignments as the semester proceeds, and you may do an entire assignment that is completely changed.\nFor example, to practice working with ggplot2 and making data-based graphics, you will complete a brief set of exercises over a few class sessions. These exercises will have 1–3 short tasks that are directly related to the topic for the week. You need to show that you made a good faith effort to work each question. There will also be a final question which requires significantly more thought and work. This will be where you get to show some creativity and stretch your abilities. Overall, labs will be graded the same check system:\n ✔+: (17.5 points (115%) in gradebook) Exercises are complete. Every task was attempted and answered, and most answers are correct. Knitted document is clean and easy to follow. Work on the final problem shows creativity or is otherwise exceptional. We will not assign these often. ✔: (15 points (100%) in gradebook) Exercises are complete and most answers are correct. This is the expected level of performance. ✔−: (7.5 points (50%) in gradebook) Exercises are less than 70% complete and/or most answers are incorrect. This indicates that you need to improve next time. We will hopefully not assign these often, but subpar work can expect a ✔−.  There is an implicit 0 for any assignment not turned in on time. If you have only partial work, then turn that in for partial credit. As noted in the syllabus, we are not grading your coding ability. We are not checking each line of code to make sure it produces some exact final figure, and we do not expect perfection. Also note that a ✓ does not require 100% success. You will sometimes get stuck with weird errors that you can’t solve, or the demands of pandemic living might occasionally become overwhelming. We are looking for good faith effort. Try hard, engage with the task, and you’ll get a ✓.\nYou may work together on the labs, but you must turn in your own answers. You will turn these labs in via D2L. You will write them using R Markdown and must knit your work to a PDF document.\n Projects To give you practice with the data and design principles you’ll learn in this class, you will complete two projects en route to the overarching final project of the course. Both these mini projects and the final project must be completed in groups.\nThe two (mini) projects are checkpoints to ensure you’re working on your project seriously. They will be graded using a check system:\n ✔+: (55 points (≈115%) in gradebook) Project is phenomenally well-designed and uses advanced R techniques. The project uncovers an important story that is not readily apparent from just looking at the raw data. I will not assign these often. ✔: (50 points (100%) in gradebook) Project is fine, follows most design principles, answers a question from the data, and uses R correctly. This is the expected level of performance. ✔−: (25 points (50%) in gradebook) Project is missing large components, is poorly designed, does not answer a relevant question, and/or uses R incorrectly. This indicates that you need to improve next time. I will hopefully not assign these often.  Because these mini projects give you practice for the final project, we will provide you with substantial feedback on your design and code.\n Final project At the end of the course, you will demonstrate your skills by completing a final project. Complete details for the final project (including past examples of excellent projects) are here. In brief, the final project has the following elements:\nYou must find existing data to analyze.1 Aggregating data from multiple sources is encouraged, but is not required.  You must visualize (at least) three interesting features of that data. Visualizations should aid the reader in understanding something about the data that might not be readily aparent.2  You must come up with some analysis—using tools from the course—which relates your data to either a prediction or a policy conclusion. For example, if you collected data from Major League Baseball games, you could try to “predict” whether a left-hander was pitching based solely on the outcomes of the batsmen.3  You must write your analysis as if presenting to a C-suite executive. If you are not familiar with this terminology, the C-suite includes, e.g., the CEO, CFO, and COO of a given company. Generally speaking, such executives are not particularly analytically oriented, and therefore your explanations need to be clear, consise (their time is valuable) and contain actionable (or valuable) information.  There is no final exam. This project is your final exam.\nThe project will not be graded using a check system, and will be graded by me (the main instructor, not a TA). I will evaluate the following four elements of your project:\nTechnical skills: Was the project easy? Does it showcase mastery of data analysis? Visual design: Was the information smartly conveyed and usable? Was it beautiful? Analytic design: Was the analysis appropriate? Was it sensible, given the dataset? Story: Did we learn something?  If you’ve engaged with the course content and completed the exercises and mini projects throughout the course, you should do just fine with the final project.\n  Note that existing is taken to mean that you are not permitted to collect data by interacting with other people. That is not to say that you cannot gather data that previously has not been gathered into a single place—this sort of exercise is encouraged.↩︎\n Pie charts of any kind will result in a 25% grade deduction.↩︎\n This is an extremely dumb idea for a number of reasons. Moreover, it’s worth mentioning that sports data, while rich, can be overwhelming due to its sheer magnitude and the variety of approaches that can be applied. Use with caution.↩︎\n   ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1629137504,"objectID":"3aa23ffb1eb3dedbe4d8a9c2165e2c58","permalink":"https://ec404.netlify.app/assignment/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/assignment/","section":"assignment","summary":"Weekly Writings  Weekly Writing Template  Labs Projects Final project   This course is the capstone of the Data Analytics Minor in the College of Social Science. Accordingly, you should—fingers crossed—enjoy data analysis. You will get the most of out this class if you:\nEngage with the readings and lecture materials Regularly use R (aka engage daily or almost every day in some way)  Each type of assignment in this class helps with one of these strategies.","tags":null,"title":"Assignments and Evaluations","type":"docs"},{"authors":null,"categories":null,"content":"   Programming basics  Conditional expressions Defining functions Namespaces For-loops Vectorization and functionals Exercises    You must turn in a PDF document of your R markdown code. Submit this to D2L by 11:59 PM on Sunday, September 5th.\nNOTE:\nAs you read through this assignment, practice with each of the examples (copy-paste them into an empty R script and run them). At the bottom of this page you will find the questions that comprise the assignment. These questions apply and expand on the topics and R functions in the assignment. Many assignments will have this same structure: some instruction preceeding specific exercises.\nRight-click to download the .Rmd template for labs . Please save the template into the labs folder in the SSC442 folder on your local hard drive. If you don’t have a nice file structure setup for the course, please make one now. It will save you from headaches in the future.\n Programming basics We teach R because it greatly facilitates data analysis. By coding in R, we can efficiently perform exploratory data analysis, build data analysis pipelines, and prepare data visualization to communicate results. However, R is not just a data analysis environment but a programming language. Advanced R programmers can develop complex packages and even improve R itself. But we do not cover advanced programming in this course. Nonetheless, in this section, we introduce three key programming concepts: conditional expressions, for-loops, and functions. These are not just key building blocks for advanced programming, but are sometimes useful during data analysis. We also note that there are several functions that are widely used to program in R but that we will not cover directly in this course. These include split, cut, do.call, and Reduce, as well as the data.table package. These are worth learning if you plan to become an expert R programmer.\nConditional expressions Conditional expressions are one of the basic features of programming. They are used for what is called flow control. The most common conditional expression is the if-else statement. In R, we can actually perform quite a bit of data analysis without conditionals. However, they do come up occasionally, and you will need them once you start writing your own functions and packages.\nHere is a very simple example showing the general structure of an if-else statement. The basic idea is to print the reciprocal of a unless a is 0:\na \u0026lt;- 0 if(a!=0){ print(1/a) } else{ print(\u0026quot;No reciprocal for 0.\u0026quot;) } ## [1] \u0026quot;No reciprocal for 0.\u0026quot; Let’s look at one more example using the US murders data frame:\nlibrary(dslabs) data(murders) murder_rate \u0026lt;- murders$total / murders$population*100000 Here is a very simple example that tells us which states, if any, have a murder rate lower than 0.5 per 100,000. The if statement protects us from the case in which no state satisfies the condition.\nind \u0026lt;- which.min(murder_rate) if(murder_rate[ind] \u0026lt; 0.5){ print(murders$state[ind]) } else{ print(\u0026quot;No state has murder rate that low\u0026quot;) } ## [1] \u0026quot;Vermont\u0026quot; If we try it again with a rate of 0.25, we get a different answer:\nif(murder_rate[ind] \u0026lt; 0.25){ print(murders$state[ind]) } else{ print(\u0026quot;No state has a murder rate that low.\u0026quot;) } ## [1] \u0026quot;No state has a murder rate that low.\u0026quot; A related function that is very useful is ifelse. This function takes three arguments: a logical and two possible answers. If the logical is TRUE, the value in the second argument is returned and if FALSE, the value in the third argument is returned. Here is an example:\na \u0026lt;- 0 ifelse(a \u0026gt; 0, 1/a, NA) ## [1] NA The function is particularly useful because it works on vectors. It examines each entry of the logical vector and returns elements from the vector provided in the second argument, if the entry is TRUE, or elements from the vector provided in the third argument, if the entry is FALSE.\na \u0026lt;- c(0, 1, 2, -4, 5) result \u0026lt;- ifelse(a \u0026gt; 0, 1/a, NA) This table helps us see what happened:    a  is_a_positive  answer1  answer2  result      0  FALSE  Inf  NA  NA    1  TRUE  1.00  NA  1.0    2  TRUE  0.50  NA  0.5    -4  FALSE  -0.25  NA  NA    5  TRUE  0.20  NA  0.2     Here is an example of how this function can be readily used to replace all the missing values in a vector with zeros:\ndata(na_example) no_nas \u0026lt;- ifelse(is.na(na_example), 0, na_example) sum(is.na(no_nas)) ## [1] 0 Two other useful functions are any and all. The any function takes a vector of logicals and returns TRUE if any of the entries is TRUE. The all function takes a vector of logicals and returns TRUE if all of the entries are TRUE. Here is an example:\nz \u0026lt;- c(TRUE, TRUE, FALSE) any(z) ## [1] TRUE all(z) ## [1] FALSE  Defining functions As you become more experienced, you will find yourself needing to perform the same operations over and over. A simple example is computing averages. We can compute the average of a vector x using the sum and length functions: sum(x)/length(x). Because we do this repeatedly, it is much more efficient to write a function that performs this operation. This particular operation is so common that someone already wrote the mean function and it is included in base R. However, you will encounter situations in which the function does not already exist, so R permits you to write your own. A simple version of a function that computes the average can be defined like this:\navg \u0026lt;- function(x){ s \u0026lt;- sum(x) n \u0026lt;- length(x) s/n } Now avg is a function that computes the mean:\nx \u0026lt;- 1:100 identical(mean(x), avg(x)) ## [1] TRUE Notice that variables defined inside a function are not saved in the workspace. So while we use s and n when we call avg, the values are created and changed only during the call. Here is an illustrative example:\ns \u0026lt;- 3 avg(1:10) ## [1] 5.5 s ## [1] 3 Note how s is still 3 after we call avg.\nIn general, functions are objects, so we assign them to variable names with \u0026lt;-. The function function tells R you are about to define a function. The general form of a function definition looks like this:\nmy_function \u0026lt;- function(VARIABLE_NAME){ perform operations on VARIABLE_NAME and calculate VALUE VALUE } The functions you define can have multiple arguments as well as default values. For example, we can define a function that computes either the arithmetic or geometric average depending on a user defined variable like this:\navg \u0026lt;- function(x, arithmetic = TRUE){ n \u0026lt;- length(x) ifelse(arithmetic, sum(x)/n, prod(x)^(1/n)) } We will learn more about how to create functions through experience as we face more complex tasks.\n Namespaces Once you start becoming more of an R expert user, you will likely need to load several add-on packages for some of your analysis. Once you start doing this, it is likely that two packages use the same name for two different functions. And often these functions do completely different things. In fact, you have already encountered this because both dplyr and the R-base stats package define a filter function. There are five other examples in dplyr. We know this because when we first load dplyr we see the following message:\nThe following objects are masked from ‘package:stats’: filter, lag The following objects are masked from ‘package:base’: intersect, setdiff, setequal, union So what does R do when we type filter? Does it use the dplyr function or the stats function? From our previous work we know it uses the dplyr one. But what if we want to use the stats version?\nThese functions live in different namespaces. R will follow a certain order when searching for a function in these namespaces. You can see the order by typing:\nsearch() The first entry in this list is the global environment which includes all the objects you define.\nSo what if we want to use the stats filter instead of the dplyr filter but dplyr appears first in the search list? You can force the use of a specific namespace by using double colons (::) like this:\nstats::filter If we want to be absolutely sure that we use the dplyr filter, we can use\ndplyr::filter Also note that if we want to use a function in a package without loading the entire package, we can use the double colon as well.\nFor more on this more advanced topic we recommend the R packages book1.\n For-loops If we had to write this section in a single sentence, it would be: Don’t use for-loops. Looping is intuitive, but R is designed to provide more computationally efficient solutions. For-loops should be considered a quick-and-dirty way to get an answer. But, hey, you live your own life. Below we provide a brief overview to for-looping.\nThe formula for the sum of the series \\(1+2+\\dots+n\\) is \\(n(n+1)/2\\). What if we weren’t sure that was the right function? How could we check? Using what we learned about functions we can create one that computes the \\(S_n\\):\ncompute_s_n \u0026lt;- function(n){ x \u0026lt;- 1:n sum(x) } How can we compute \\(S_n\\) for various values of \\(n\\), say \\(n=1,\\dots,25\\)? Do we write 25 lines of code calling compute_s_n? No, that is what for-loops are for in programming. In this case, we are performing exactly the same task over and over, and the only thing that is changing is the value of \\(n\\). For-loops let us define the range that our variable takes (in our example \\(n=1,\\dots,10\\)), then change the value and evaluate expression as you loop.\nPerhaps the simplest example of a for-loop is this useless piece of code:\nfor(i in 1:5){ print(i) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 Here is the for-loop we would write for our \\(S_n\\) example:\nm \u0026lt;- 25 s_n \u0026lt;- vector(length = m) # create an empty vector for(n in 1:m){ s_n[n] \u0026lt;- compute_s_n(n) } In each iteration \\(n=1\\), \\(n=2\\), etc…, we compute \\(S_n\\) and store it in the \\(n\\)th entry of s_n.\nNow we can create a plot to search for a pattern:\nn \u0026lt;- 1:m plot(n, s_n) If you noticed that it appears to be a quadratic, you are on the right track because the formula is \\(n(n+1)/2\\). --\n Vectorization and functionals Although for-loops are an important concept to understand, in R we rarely use them. As you learn more R, you will realize that vectorization is preferred over for-loops since it results in shorter and clearer code. (It’s also vastly more efficient computationally, which can matter as your data grows.) A vectorized function is a function that will apply the same operation on each of the vectors.\nx \u0026lt;- 1:10 sqrt(x) ## [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427 ## [9] 3.000000 3.162278 y \u0026lt;- 1:10 x*y ## [1] 1 4 9 16 25 36 49 64 81 100 To make this calculation, there is no need for for-loops. However, not all functions work this way. For instance, the function we just wrote, compute_s_n, does not work element-wise since it is expecting a scalar. This piece of code does not run the function on each entry of n:\nn \u0026lt;- 1:25 compute_s_n(n) Functionals are functions that help us apply the same function to each entry in a vector, matrix, data frame, or list. Here we cover the functional that operates on numeric, logical, and character vectors: sapply.\nThe function sapply permits us to perform element-wise operations on any function. Here is how it works:\nx \u0026lt;- 1:10 sapply(x, sqrt) ## [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427 ## [9] 3.000000 3.162278 Each element of x is passed on to the function sqrt and the result is returned. These results are concatenated. In this case, the result is a vector of the same length as the original x. This implies that the for-loop above can be written as follows:\nn \u0026lt;- 1:25 s_n \u0026lt;- sapply(n, compute_s_n) Other functionals are apply, lapply, tapply, mapply, vapply, and replicate. We mostly use sapply, apply, and replicate in this book, but we recommend familiarizing yourselves with the others as they can be very useful.\n Exercises This is your first weekly lab assignment. Each lab assignment will need to be done in Rmarkdown using the lab template, just right-click and Save As…Start a new folder on your drive for this course, and inside that a new folder for lab assignments, and inside that a new folder for Lab No. 1. Rmarkdown will place some intermediate files in that folder, so leaving .Rmd files on your desktop will make things messy, fast.\nOnce you’ve saved the file, open it up in Rstudio.\n Change the title to “Lab 1”\n Put your name on it\n Leave the date alone. That little `r Sys.time(...)` will ask R to return the date (with M-D-Y formatting), which Rmarkdown will put in as if you had typed in the actual date.\n When you type ## 1. Text of..., Markdown will recognize “1. Text of” as a header and will automatically make it big.\n So please copy the number and text of the question you are answering here.  Next will be the ```{r q1} text that will be in gray. R will recognize this as code and will treat it as such. Anything run in that block will have an output.\n If you want to see what the code will do, copy the code and paste it into the gray area. Then, click the green right arrow in the top-right corner of the gray code chunk. It should show you the results.\n Use the results (plus your understanding of the code) to answer the question\n  With each completed question, clidk the “Knit” button up above the script window. Rmarkdown will create a .pdf for you of your work (as long as it doesn’t hit any R errors). Knit often to make sure you haven’t hit an error!\n The \\newpage line is a Latex command (the program that makes the typesetting look nice). It will start a new pdf page.\n On the next page, copy question #2 to a new header using ##.\n Once done, render one last .pdf and turn it in on D2L!\n  EXERCISES\nIn your first code chunk, load the package library tidyverse, which you will need for Question 8. Always load all your package libraries at the top, in the first code chunk!\n What will this conditional expression return and why?\n  x \u0026lt;- c(1,2,-3,4) if(all(x\u0026gt;0)){ print(\u0026quot;All Postives\u0026quot;) } else{ print(\u0026quot;Not all positives\u0026quot;) } Which of the following expressions is always FALSE when at least one entry of a logical vector x is TRUE?  all(x) any(x) any(!x) all(!x)  The function nchar tells you how many characters long a character vector is. Write a line of code that assigns to the object new_names the state abbreviation when the state name is longer than 8 characters.\n Create a function sum_n that for any given value, say \\(n\\), computes the sum of the integers from 1 to n (inclusive). Use the function to determine the sum of integers from 1 to 5,000.\n Create a function altman_plot that takes two arguments, x and y, and plots the difference against the sum. Use it to make an altman plot of x \u0026lt;- c(5,7,9) and y \u0026lt;- c(10,11,12). When your function creates the plot, it will output automatically in your Rmarkdown knitted .pdf.\n After running the code below, what is the value of x and why?\n  x \u0026lt;- 3 my_func \u0026lt;- function(y){ x \u0026lt;- 5 y+5 } Write a function compute_s_n that for any given \\(n\\) computes the sum \\(S_n = 1^2 + 2^2 + 3^2 + \\dots n^2\\). Report the value of the sum when \\(n=10\\).\n Define an empty numerical vector s_n of size 25 using s_n \u0026lt;- vector(\"numeric\", 25) and store in the results of \\(S_1, S_2, \\dots S_{25}\\) using a for-loop.\n Repeat exercise 8, but this time use sapply.\n Repeat exercise 8, but this time use map_dbl.\n Plot \\(S_n\\) versus \\(n\\). Use points defined by \\(n=1,\\dots,25\\).\n Confirm that the formula for this sum is \\(S_n= n(n+1)(2n+1)/6\\).\n      http://r-pkgs.had.co.nz/namespace.html↩︎\n   ","date":1610668800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1629137504,"objectID":"5e86e029830987df59b0fed9d67636a4","permalink":"https://ec404.netlify.app/assignment/00-assignment/","publishdate":"2021-01-15T00:00:00Z","relpermalink":"/assignment/00-assignment/","section":"assignment","summary":"Programming basics  Conditional expressions Defining functions Namespaces For-loops Vectorization and functionals Exercises    You must turn in a PDF document of your R markdown code. Submit this to D2L by 11:59 PM on Sunday, September 5th.\nNOTE:\nAs you read through this assignment, practice with each of the examples (copy-paste them into an empty R script and run them). At the bottom of this page you will find the questions that comprise the assignment.","tags":null,"title":"Programming Basics in R","type":"docs"},{"authors":null,"categories":null,"content":"    Readings A Brief Introduction to SSC442  About Me About You This Course More About This Course And finally… Guiding Questions  What is “Data Analytics”?  Starting point for this course  Statistical Learning The Pros and Cons of Correlation A Case Study in Prediction More Recent Examples of Prediction An Aside: Nomenclature Learning from Data   R basics  Case study: US homicides by firearm The (very) basics  Objects The workspace Functions Other prebuilt objects Variable names Saving your workspace Motivating scripts Commenting your code  Data types  Data frames Examining an object The accessor: $ Vectors: numerics, characters, and logical Factors Lists Matrices  Vectors  Creating vectors Names Sequences Subsetting  Coercion  Not availables (NA)  Sorting  sort order max and which.max rank Beware of recycling  Vector arithmetics  Rescaling a vector Two vectors  Indexing  Subsetting with logicals Logical operators which match %in%  Rmarkdown Lecture Video    Readings As noted in the syllabus, your readings will be assigned each week in this area. For this initial week, please read the course content. Read closely the following:\n The syllabus, content, examples, and labs pages for this class. This page. Yes, the whole thing.  Things to stress from syllabus:\n E-mail isn’t the ideal solution for technical problems No appointments necessary for regularly scheduled office hours; or by appointment. TA office hours are great as well. Our TA has experience in this course. Can only reschedule exams (with good reason) if you tell me before the exam that you have a conflict.  Notify me immediately if you need accommodations because of RCPD or religious convictions; If you approach me at the last minute, I may not be able to help.   Despite my apparent hard-assness, I’m here to help. I am not in the business of giving bad grades for no reason, and I genuinely want you to learn a lot and enjoy the course.\n A Brief Introduction to SSC442  I keep saying that the sexy job in the next 10 years will be statisticians. And I’m not kidding.\n Hal Varian, Chief Economist, Google  About Me Me: My primary area of expertise is behavioral economics (also known as psychology and economics). While my research occasionally touches the topics in the course, I mostly utilize things in the course as tools. In this way, we are likely the same.\nThis class is totally, unapologetically a work in progress. The material is a mish-mash of stuff from courses offered at Caltech, Stanford, Harvard, and Duke…so, yeah, it will be challenging. Hopefully, you’ll find it fun!\n About You New phone who dis? Please email me bbushong@msu.edu your\n name (with pronunciation guide)\n major\n desired graduation year and semester\n interest in this course on a 10-point scale (1: not at all interested; 10: helllllll yeah)\n   You must spend 5 minutes emailing me a little bit about your interests before the next class.\n This Course The syllabus is posted on the course website. I’ll walk through highlights now, but read it later – it’s long. - But eventually, please read it. It is “required.”\nSyllabus highlights:\n Grade is composed of weekly writings, labs, and projects.  Weekly writings: 22% Participation: 4% Labs: 29% Projects: 45%  This structure is designed to give ~55% “for free”. Success on the projects will require real work. Labs consist of a practical implementation of something we’ve covered in the course (e.g., code your own Recommender System).  Grading Grading: come to class.\nIf you complete all assignments and attend all class dates, I suspect you will do very well. Given the way the syllabus is structured, I conjecture that the following is a loose guide to grades:\n4.0 Turned in all assignments with good effort, worked hard on the projects and was proud of final product.\n3.5 Turned in all assignments with good effort, worked a bit on the projects and was indifferent to final product.\n3.0 Turned in all assignments with some effort, worked a bit on the projects and was shy about final product.\n\u0026lt; 3.0 Very little effort, or did not turn in all assignments, worked very little on the projects and was embarassed by final product.\n…of course, failing to turn in assignments can lead to a grade dramatically lower than just a 3.0.\n  More About This Course There are sort of three texts for this course and sort of zero.\nThe “main text” is free and available online. The secondary text is substantially more difficult, but also free online. The third text costs about $25. Assigned readings can be found on the course website under “Content”.\nPlease please please please please: Ask questions during class. - Most ideas will be new. - Sometimes (often?) the material itself will be confusing or interesting—or both! - Teaching is incredibly challenging right now. - Note: If I find that attendance is terrible, I may have to start incorporating attendance into participation.\nReturn of the Please: If there is some topic that you really want to learn about, ask. If you are uncomfortable asking in front of the whole group, please see me during office hours.\nBecause this is a new course:\n Some of the lectures will be way too long or too short. Some (most?) of the lectures won’t make sense. Some of the time I’ll forget what I intended to say and awkwardly stare at you for a few moments (sorry).  Comment throughout the course, not just at the end.\nThe material will improve with time and feedback.\nI encourage measured feedback and thoughtful responses to questions. If I call on you and you don’t know immediately, don’t freak out. If you don’t know, it’s totally okay to say you don’t know.\nSUPER BIG IMPORTANT EXPLANATION OF THE COURSE We teach using “math”. Don’t be afraid. The math won’t hurt you. I fundamentally believe that true knowledge of how we learn from data depends on a basic understanding of the underlying mathematics.\n-The good news is that you’ll face no black boxes. In this class you’ll actually learn how things work. (Probably. Hopefully?) -More good news: the level of required math is reasonably low. High-school algebra or equivalent should be fine. -The bad news is that (at times) the course is notation-heavy. This class will require an active mind.\n  And finally… I cannot address field-specific questions in areas outside economics to any satisfying degree. I’m good at knowing what I don’t know and have a very small ego, which means that I’m much less likely to blow smoke up your ass than other professors. So I won’t pretend I know everything. Of course, this implies that I can’t help with certain types of questions.\nThis course should be applicable broadly, but many of the examples will lean on my personal expertise (sorry).\n Guiding Questions For future lectures, the guiding questions will be more pointed and at a higher level to help steer your thinking. Here, we want to ensure you remember some basics and accordingly the questions are straightforward.\n Do you remember anything about R? What are the different data types in R? How do you index specific elements of a vector? Why might you want to do that?    What is “Data Analytics”? How do you define “data analytics”? (Not a rhetorical question!)\n This course will avoid this nomenclature. It is confusing and imprecise. But you signed up (suckers) and I owe an explanation of what this course will cover.  Some “data analytics” topics we will cover:\n Linear regression (il classico). Models of classification or discrete choice. Analysis of ``wide’’ data. Decision trees and other non-linear models.  Starting point for this course Better utilizing existing data can improve our predictive power whilst providing interpretable outputs for considering new policies.\nWARNING: Causation is tough and we will spend the entire course warning you to avoid making causal claims!\nStatistical Learning A Brief History\nSuppose you are a researcher and you want to teach a computer to recognize images of a tree.\nNote: this is an ``easy” problem. If you show pictures to a 3-year-old, that child will probably be able to tell you if there is a tree in the picture.\nComputer scientists spent about 20 years on this problem because they thought about the problem like nerds and tried to write down a series of rules.\nRules are difficult to form, and simply writing rules misses the key insight: the data can tell you something.\nSocial Science Approaches to Statistical Learning A Brief History\nSuppose you are a researcher and you want to know whether prisons reduce crime.\nfrom ``A Call for a Moratorium on Prison Building’’ (1976)\n Between 1955 and 1975, fifteen states increased the collective capacity of their adult prison systems by 56% (from, on average, 63,100 to 98,649). Fifteen other states increased capacity by less than 4% (from 49,575 to 51,440). In “heavy-construction” states the crime rate increased by 167%; in “low-construction” states the crime rate increased by 145%.     Prison Capacity Crime Rate    High construction \\(\\uparrow\\)~56% \\(\\uparrow\\)~167%  Low construction \\(\\uparrow\\)~4% \\(\\uparrow\\)~145%      The Pros and Cons of Correlation Pros: - Nature gives you correlations for free. - In principle, everyone can agree on the facts.\nCons: - Correlations are not very helpful. - They show what has happened, but not why. - For many things, we care about why.\nWhy a Correlation Exists Between X and Y \\(X \\rightarrow Y\\) X causes Y (causality)\n \\(X \\leftarrow Y\\) Y causes X (reverse causality)\n \\(Z \\rightarrow X\\); \\(Z \\rightarrow Y\\) Z causes X and Y (common cause)\n \\(X \\rightarrow Y\\); \\(Y \\rightarrow X\\) X causes Y and Y causes X (simultaneous equations)\n   Uniting Social Science and Computer Science We will start in this course by examining situations where we do not care about why something has happened, but instead we care about our ability to predict its occurrence from existing data.\n(But of course keep in back of mind that if you are making policy, you must care about why something happened).\nWe will also borrow a few other ideas from CS: - Anything is data + Satellite data + Unstructured text or audio + Facial expressions or vocal intonations - Subtle improvements on existing techniques - An eye towards practical implementability over ``cleanliness”\n  A Case Study in Prediction Example: a firm wishes to predict user behavior based on previous purchases or interactions.\nSmall margins \\(\\rightarrow\\) huge payoffs. \\(10\\% \\rightarrow\\) $1 million.\nNot obvious to me why this was worth so much for Netflix (that’s an interesting research question). However, it’s quite obvious why this is true in financial markets.\n More Recent Examples of Prediction  Identify the risk factors for prostate cancer. Classify a tissue sample into one of several cancer classes, based on a gene expression profile. Classify a recorded phoneme based on a log-periodogram. Predict whether someone will have a heart attack on the basis of demographic, diet and clinical measurements. Customize an email spam detection system. Identify a hand-drawn object. Determine which oscillations of stellar luminosity are likely due to exoplanets. Establish the relationship between salary and demographic variables in population survey data.   An Aside: Nomenclature Machine learning arose as a subfield of Artificial Intelligence.\nStatistical learning arose as a subfield of Statistics.\nThere is much overlap; however, a few points of distinction:\n Machine learning has a greater emphasis on large scale applications and prediction accuracy.\n Statistical learning emphasizes models and their interpretability, and precision and uncertainty.\n But the distinction has become more and more blurred, and there is a great deal of “cross-fertilization”.   Obviously true: machine learning has the upper hand in marketing.\n Learning from Data The following are the basic requirements for statistical learning:\nA pattern exists. This pattern is not easily expressed in a closed mathematical form. You have data.  ALERT\nThe course content below should be considered a prerequisite for success. For those concerned about basics of R, you absolutely must read this content and attempt the coding exercises. If you struggle to follow the content, please contact the professor or TA.\n    R basics In this class, we will be using R software environment for all our analyses. You will learn R and data analysis techniques simultaneously. To follow along you will therefore need access to R. We also recommend the use of an integrated development environment (IDE), such as RStudio, to save your work. Note that it is common for a course or workshop to offer access to an R environment and an IDE through your web browser, as done by RStudio cloud1. If you have access to such a resource, you don’t need to install R and RStudio. However, if you intend on becoming a practicing data analyst, we highly recommend installing these tools on your computer2. This is not hard.\nBoth R and RStudio are free and available online.\nCase study: US homicides by firearm Imagine you live in Europe (if only!) and are offered a job in a US company with many locations in every state. It is a great job, but headlines such as US Gun Homicide Rate Higher Than Other Developed Countries3 have you worried. Fox News runs a scary looking graphic, and charts like the one below only add to that concern:\nOr even worse, this version from everytown.org: But then you remember that (1) this is a hypothetical exercise; (2) you’ll take literally any job at this point; and (3) Geographic diversity matters – the United States is a large and diverse country with 50 very different states (plus the District of Columbia and some lovely territories).4\n## Warning: It is deprecated to specify `guide = FALSE` to remove a guide. Please ## use `guide = \u0026quot;none\u0026quot;` instead. California, for example, has a larger population than Canada, and 20 US states have populations larger than that of Norway. In some respects, the variability across states in the US is akin to the variability across countries in Europe. Furthermore, although not included in the charts above, the murder rates in Lithuania, Ukraine, and Russia are higher than 4 per 100,000. So perhaps the news reports that worried you are too superficial.\nThis is a relatively simple and straightforward problem in social science: you have options of where to live, and want to determine the safety of the various states. Your “research” is clearly policy-relevant: you will eventually have to live somewhere. We will begin to tackle the problem by examining data related to gun homicides in the US during 2010 using R.\nBefore we get started with our example, we need to cover logistics as well as some of the very basic building blocks that are required to gain more advanced R skills. Ideally, this is a refresher. However, we are aware that your preparation in previously courses varies greatly from student to student. Moreover, we want you to be aware that the usefulness of some of these early building blocks may not be immediately obvious. Later in the class you will appreciate having these skills. Mastery will be rewarded both in this class and (of course) in life.\n The (very) basics Before we get started with the motivating dataset, we need to cover the very basics of R.\nObjects Suppose a relatively math unsavvy student asks us for help solving several quadratic equations of the form \\(ax^2+bx+c = 0\\). You—a savvy student—recall that the quadratic formula gives us the solutions:\n\\[ \\frac{-b - \\sqrt{b^2 - 4ac}}{2a}\\,\\, \\mbox{ and } \\frac{-b + \\sqrt{b^2 - 4ac}}{2a} \\]\nwhich of course depend on the values of \\(a\\), \\(b\\), and \\(c\\). That is, the quadratic equation represents a function with three arguments.\nOne advantage of programming languages is that we can define variables and write expressions with these variables, similar to how we do so in math, but obtain a numeric solution. We will write out general code for the quadratic equation below, but if we are asked to solve \\(x^2 + x -1 = 0\\), then we define:\na \u0026lt;- 1 b \u0026lt;- 1 c \u0026lt;- -1 which stores the values for later use. We use \u0026lt;- to assign values to the variables.\nWe can also assign values using = instead of \u0026lt;-, but we recommend against using = to avoid confusion.5\nTRY IT\nCopy and paste the code above into your console to define the three variables. Note that R does not print anything when we make this assignment. This means the objects were defined successfully. Had you made a mistake, you would have received an error message. Throughout these written notes, you’ll have the most success if you continue to copy code into your own console.\n To see the value stored in a variable, we simply ask R to evaluate a and it shows the stored value:\na ## [1] 1 A more explicit way to ask R to show us the value stored in a is using print like this:\nprint(a) ## [1] 1 We use the term object to describe stuff that is stored in R. Variables are examples, but objects can also be more complicated entities such as functions, which are described later.\n The workspace As we define objects in the console, we are actually changing the workspace. You can see all the variables saved in your workspace by typing:\nls() ## [1] \u0026quot;a\u0026quot; \u0026quot;b\u0026quot; \u0026quot;c\u0026quot; \u0026quot;dat\u0026quot; \u0026quot;murders\u0026quot; (Note that one of my variables listed above comes from generating the graphs above). In RStudio, the Environment tab shows the values:\nWe should see a, b, and c. If you try to recover the value of a variable that is not in your workspace, you receive an error. For example, if you type x you will receive the following message: Error: object 'x' not found.\nNow since these values are saved in variables, to obtain a solution to our equation, we use the quadratic formula:\n(-b + sqrt(b^2 - 4*a*c) ) / ( 2*a ) ## [1] 0.618034 (-b - sqrt(b^2 - 4*a*c) ) / ( 2*a ) ## [1] -1.618034  Functions Once you define variables, the data analysis process can usually be described as a series of functions applied to the data. R includes several zillion predefined functions and most of the analysis pipelines we construct make extensive use of the built-in functions. But R’s power comes from its scalability. We have access to (nearly) infinite functions via install.packages and library. As we go through the course, we will carefully note new functions we bring to each problem. For now, though, we will stick to the basics.\nNote that you’ve used a function already: you used the function sqrt to solve the quadratic equation above. These functions do not appear in the workspace because you did not define them, but they are available for immediate use.\nIn general, we need to use parentheses to evaluate a function. If you type ls, the function is not evaluated and instead R shows you the code that defines the function. If you type ls() the function is evaluated and, as seen above, we see objects in the workspace.\nUnlike ls, most functions require one or more arguments. Below is an example of how we assign an object to the argument of the function log. Remember that we earlier defined a to be 1:\nlog(8) ## [1] 2.079442 log(a) ## [1] 0 You can find out what the function expects and what it does by reviewing the very useful manuals included in R. You can get help by using the help function like this:\nhelp(\u0026quot;log\u0026quot;) For most functions, we can also use this shorthand:\n?log The help page will show you what arguments the function is expecting. For example, log needs x and base to run. However, some arguments are required and others are optional. You can determine which arguments are optional by noting in the help document that a default value is assigned with =. Defining these is optional.6 For example, the base of the function log defaults to base = exp(1)—that is, log evaluates the natural log by default.\nIf you want a quick look at the arguments without opening the help system, you can type:\nargs(log) ## function (x, base = exp(1)) ## NULL You can change the default values by simply assigning another object:\nlog(8, base = 2) ## [1] 3 Note that we have not been specifying the argument x as such:\nlog(x = 8, base = 2) ## [1] 3 The above code works, but we can save ourselves some typing: if no argument name is used, R assumes you are entering arguments in the order shown in the help file or by args. So by not using the names, it assumes the arguments are x followed by base:\nlog(8,2) ## [1] 3 If using the arguments’ names, then we can include them in whatever order we want:\nlog(base = 2, x = 8) ## [1] 3 To specify arguments, we must use =, and cannot use \u0026lt;-.\nThere are some exceptions to the rule that functions need the parentheses to be evaluated. Among these, the most commonly used are the arithmetic and relational operators. For example:\n2 ^ 3 ## [1] 8 You can see the arithmetic operators by typing:\nhelp(\u0026quot;+\u0026quot;) or\n?\u0026quot;+\u0026quot; and the relational operators by typing:\nhelp(\u0026quot;\u0026gt;\u0026quot;) or\n?\u0026quot;\u0026gt;\u0026quot;  Other prebuilt objects There are several datasets that are included for users to practice and test out functions. You can see all the available datasets by typing:\ndata() This shows you the object name for these datasets. These datasets are objects that can be used by simply typing the name. For example, if you type:\nco2 R will show you Mauna Loa atmospheric \\(CO^2\\) concentration data.\nOther prebuilt objects are mathematical quantities, such as the constant \\(\\pi\\) and \\(\\infty\\):\npi ## [1] 3.141593 Inf+1 ## [1] Inf  Variable names We have used the letters a, b, and c as variable names, but variable names can be almost anything. Some basic rules in R are that variable names have to start with a letter, can’t contain spaces, and should not be variables that are predefined in R. For example, don’t name one of your variables install.packages by typing something like install.packages \u0026lt;- 2. Usually, R is smart enough to prevent you from doing such nonsense, but it’s important to develop good habits.\nA nice convention to follow is to use meaningful words that describe what is stored, use only lower case, and use underscores as a substitute for spaces. For the quadratic equations, we could use something like this:\nsolution_1 \u0026lt;- (-b + sqrt(b^2 - 4*a*c)) / (2*a) solution_2 \u0026lt;- (-b - sqrt(b^2 - 4*a*c)) / (2*a) For more advice, we highly recommend studying (Hadley Wickham’s style guide)[http://adv-r.had.co.nz/Style.html].\n Saving your workspace Values remain in the workspace until you end your session or erase them with the function rm. But workspaces also can be saved for later use. In fact, when you quit R, the program asks you if you want to save your workspace. If you do save it, the next time you start R, the program will restore the workspace.\nWe actually recommend against saving the workspace this way because, as you start working on different projects, it will become harder to keep track of what is saved. Instead, we recommend you assign the workspace a specific name. You can do this by using the function save or save.image. To load, use the function load. When saving a workspace, we recommend the suffix rda or RData. In RStudio, you can also do this by navigating to the Session tab and choosing Save Workspace as. You can later load it using the Load Workspace options in the same tab. You can read the help pages on save, save.image, and load to learn more.\n Motivating scripts To solve another equation such as \\(3x^2 + 2x -1\\), we can copy and paste the code above and then redefine the variables and recompute the solution:\na \u0026lt;- 3 b \u0026lt;- 2 c \u0026lt;- -1 (-b + sqrt(b^2 - 4*a*c)) / (2*a) (-b - sqrt(b^2 - 4*a*c)) / (2*a) By creating and saving a script with the code above, we would not need to retype everything each time and, instead, simply change the variable names. Try writing the script above into an editor and notice how easy it is to change the variables and receive an answer.\n Commenting your code If a line of R code starts with the symbol #, it is not evaluated. We can use this to write reminders of why we wrote particular code. For example, in the script above we could add:\n## Code to compute solution to quadratic equation of the form ax^2 + bx + c ## define the variables a \u0026lt;- 3 b \u0026lt;- 2 c \u0026lt;- -1 ## now compute the solution (-b + sqrt(b^2 - 4*a*c)) / (2*a) (-b - sqrt(b^2 - 4*a*c)) / (2*a) TRY IT\nWhat is the sum of the first 100 positive integers? The formula for the sum of integers \\(1\\) through \\(n\\) is \\(n(n+1)/2\\). Define \\(n=100\\) and then use R to compute the sum of \\(1\\) through \\(100\\) using the formula. What is the sum?\n Now use the same formula to compute the sum of the integers from 1 through 1,000.\n Look at the result of typing the following code into R:\n  n \u0026lt;- 1000 x \u0026lt;- seq(1, n) sum(x) Based on the result, what do you think the functions seq and sum do? You can use help.\nsum creates a list of numbers and seq adds them up. seq creates a list of numbers and sum adds them up. seq creates a random list and sum computes the sum of 1 through 1,000. sum always returns the same number.  In math and programming, we say that we evaluate a function when we replace the argument with a given number. So if we type sqrt(4), we evaluate the sqrt function. In R, you can evaluate a function inside another function. The evaluations happen from the inside out. Use one line of code to compute the log, in base 10, of the square root of 100.\n Which of the following will always return the numeric value stored in x? You can try out examples and use the help system if you want.\n  log(10^x) log10(x^10) log(exp(x)) exp(log(x, base = 2))     Data types Variables in R can be of different types. For example, we need to distinguish numbers from character strings and tables from simple lists of numbers. The function class helps us determine what type of object we have:\na \u0026lt;- 2 class(a) ## [1] \u0026quot;numeric\u0026quot; To work efficiently in R, it is important to learn the different types of variables and what we can do with these.\nData frames Up to now, the variables we have defined are just one number. This is not very useful for storing data. The most common way of storing a dataset in R is in a data frame. Conceptually, we can think of a data frame as a table with rows representing observations and the different variables reported for each observation defining the columns. Data frames are particularly useful for datasets because we can combine different data types into one object.\nA large proportion of data analysis challenges start with data stored in a data frame. For example, we stored the data for our motivating example in a data frame. You can access this dataset by loading the dslabs library and loading the murders dataset using the data function:\nlibrary(dslabs) data(murders) To see that this is in fact a data frame, we type:\nclass(murders) ## [1] \u0026quot;data.frame\u0026quot;  Examining an object The function str is useful for finding out more about the structure of an object:\nstr(murders) ## \u0026#39;data.frame\u0026#39;: 51 obs. of 5 variables: ## $ state : chr \u0026quot;Alabama\u0026quot; \u0026quot;Alaska\u0026quot; \u0026quot;Arizona\u0026quot; \u0026quot;Arkansas\u0026quot; ... ## $ abb : chr \u0026quot;AL\u0026quot; \u0026quot;AK\u0026quot; \u0026quot;AZ\u0026quot; \u0026quot;AR\u0026quot; ... ## $ region : Factor w/ 4 levels \u0026quot;Northeast\u0026quot;,\u0026quot;South\u0026quot;,..: 2 4 4 2 4 4 1 2 2 2 ... ## $ population: num 4779736 710231 6392017 2915918 37253956 ... ## $ total : num 135 19 232 93 1257 ... This tells us much more about the object. We see that the table has 51 rows (50 states plus DC) and five variables. We can show the first six lines using the function head:\nhead(murders) ## state abb region population total ## 1 Alabama AL South 4779736 135 ## 2 Alaska AK West 710231 19 ## 3 Arizona AZ West 6392017 232 ## 4 Arkansas AR South 2915918 93 ## 5 California CA West 37253956 1257 ## 6 Colorado CO West 5029196 65 In this dataset, each state is considered an observation and five variables are reported for each state.\nBefore we go any further in answering our original question about different states, let’s learn more about the components of this object.\n The accessor: $ For our analysis, we will need to access the different variables represented by columns included in this data frame. To do this, we use the accessor operator $ in the following way:\nmurders$population ## [1] 4779736 710231 6392017 2915918 37253956 5029196 3574097 897934 ## [9] 601723 19687653 9920000 1360301 1567582 12830632 6483802 3046355 ## [17] 2853118 4339367 4533372 1328361 5773552 6547629 9883640 5303925 ## [25] 2967297 5988927 989415 1826341 2700551 1316470 8791894 2059179 ## [33] 19378102 9535483 672591 11536504 3751351 3831074 12702379 1052567 ## [41] 4625364 814180 6346105 25145561 2763885 625741 8001024 6724540 ## [49] 1852994 5686986 563626 But how did we know to use population? Previously, by applying the function str to the object murders, we revealed the names for each of the five variables stored in this table. We can quickly access the variable names using:\nnames(murders) ## [1] \u0026quot;state\u0026quot; \u0026quot;abb\u0026quot; \u0026quot;region\u0026quot; \u0026quot;population\u0026quot; \u0026quot;total\u0026quot; It is important to know that the order of the entries in murders$population preserves the order of the rows in our data table. This will later permit us to manipulate one variable based on the results of another. For example, we will be able to order the state names by the number of murders.\nTip: R comes with a very nice auto-complete functionality that saves us the trouble of typing out all the names. Try typing murders$p then hitting the tab key on your keyboard. This functionality and many other useful auto-complete features are available when working in RStudio.\n Vectors: numerics, characters, and logical The object murders$population is not one number but several. We call these types of objects vectors. A single number is technically a vector of length 1, but in general we use the term vectors to refer to objects with several entries. The function length tells you how many entries are in the vector:\npop \u0026lt;- murders$population length(pop) ## [1] 51 This particular vector is numeric since population sizes are numbers:\nclass(pop) ## [1] \u0026quot;numeric\u0026quot; In a numeric vector, every entry must be a number.\nTo store character strings, vectors can also be of class character. For example, the state names are characters:\nclass(murders$state) ## [1] \u0026quot;character\u0026quot; As with numeric vectors, all entries in a character vector need to be a character.\nAnother important type of vectors are logical vectors. These must be either TRUE or FALSE.\nz \u0026lt;- 3 == 2 z ## [1] FALSE class(z) ## [1] \u0026quot;logical\u0026quot; Here the == is a relational operator asking if 3 is equal to 2. In R, if you just use one =, you actually assign a variable, but if you use two == you test for equality. Yet another reason to avoid assigning via =… it can get confusing and typos can really mess things up.\nYou can see the other relational operators by typing:\n?Comparison In future sections, you will see how useful relational operators can be.\nWe discuss more important features of vectors after the next set of exercises.\nAdvanced: Mathematically, the values in pop are integers and there is an integer class in R. However, by default, numbers are assigned class numeric even when they are round integers. For example, class(1) returns numeric. You can turn them into class integer with the as.integer() function or by adding an L like this: 1L. Note the class by typing: class(1L)\n Factors In the murders dataset, we might expect the region to also be a character vector. However, it is not:\nclass(murders$region) ## [1] \u0026quot;factor\u0026quot; It is a factor. Factors are useful for storing categorical data. We can see that there are only 4 regions by using the levels function:\nlevels(murders$region) ## [1] \u0026quot;Northeast\u0026quot; \u0026quot;South\u0026quot; \u0026quot;North Central\u0026quot; \u0026quot;West\u0026quot; In the background, R stores these levels as integers and keeps a map to keep track of the labels. This is more memory efficient than storing all the characters. It is also useful for computational reasons we’ll explore later.\nNote that the levels have an order that is different from the order of appearance in the factor object. The default in R is for the levels to follow alphabetical order. However, often we want the levels to follow a different order. You can specify an order through the levels argument when creating the factor with the factor function. For example, in the murders dataset regions are ordered from east to west. The function reorder lets us change the order of the levels of a factor variable based on a summary computed on a numeric vector. We will demonstrate this with a simple example, and will see more advanced ones in the Data Visualization part of the book.\nSuppose we want the levels of the region by the total number of murders rather than alphabetical order. If there are values associated with each level, we can use the reorder and specify a data summary to determine the order. The following code takes the sum of the total murders in each region, and reorders the factor following these sums.\nregion \u0026lt;- murders$region value \u0026lt;- murders$total region \u0026lt;- reorder(region, value, FUN = sum) levels(region) ## [1] \u0026quot;Northeast\u0026quot; \u0026quot;North Central\u0026quot; \u0026quot;West\u0026quot; \u0026quot;South\u0026quot; The new order is in agreement with the fact that the Northeast has the least murders and the South has the most.\nWarning: Factors can be a source of confusion since sometimes they behave like characters and sometimes they do not. As a result, confusing factors and characters are a common source of bugs.\n Lists Data frames are a special case of lists. We will cover lists in more detail later, but know that they are useful because you can store any combination of different types. Below is an example of a list we created for you:\nrecord ## $name ## [1] \u0026quot;John Doe\u0026quot; ## ## $student_id ## [1] 1234 ## ## $grades ## [1] 95 82 91 97 93 ## ## $final_grade ## [1] \u0026quot;A\u0026quot; class(record) ## [1] \u0026quot;list\u0026quot; As with data frames, you can extract the components of a list with the accessor $. In fact, data frames are a type of list.\nrecord$student_id ## [1] 1234 We can also use double square brackets ([[) like this:\nrecord[[\u0026quot;student_id\u0026quot;]] ## [1] 1234 You should get used to the fact that in R there are often several ways to do the same thing. such as accessing entries.7\nYou might also encounter lists without variable names.\nrecord2 ## [[1]] ## [1] \u0026quot;John Doe\u0026quot; ## ## [[2]] ## [1] 1234 If a list does not have names, you cannot extract the elements with $, but you can still use the brackets method and instead of providing the variable name, you provide the list index, like this:\nrecord2[[1]] ## [1] \u0026quot;John Doe\u0026quot; We won’t be using lists until later, but you might encounter one in your own exploration of R. For this reason, we show you some basics here.\n Matrices Matrices are another type of object that are common in R. Matrices are similar to data frames in that they are two-dimensional: they have rows and columns. However, like numeric, character and logical vectors, entries in matrices have to be all the same type. For this reason data frames are much more useful for storing data, since we can have characters, factors, and numbers in them.\nYet matrices have a major advantage over data frames: we can perform matrix algebra operations, a powerful type of mathematical technique. We do not describe these operations in this class, but much of what happens in the background when you perform a data analysis involves matrices. We describe them briefly here since some of the functions we will learn return matrices.\nWe can define a matrix using the matrix function. We need to specify the number of rows and columns.\nmat \u0026lt;- matrix(1:12, 4, 3) mat ## [,1] [,2] [,3] ## [1,] 1 5 9 ## [2,] 2 6 10 ## [3,] 3 7 11 ## [4,] 4 8 12 You can access specific entries in a matrix using square brackets ([). If you want the second row, third column, you use:\nmat[2, 3] ## [1] 10 If you want the entire second row, you leave the column spot empty:\nmat[2, ] ## [1] 2 6 10 Notice that this returns a vector, not a matrix.\nSimilarly, if you want the entire third column, you leave the row spot empty:\nmat[, 3] ## [1] 9 10 11 12 This is also a vector, not a matrix.\nYou can access more than one column or more than one row if you like. This will give you a new matrix.\nmat[, 2:3] ## [,1] [,2] ## [1,] 5 9 ## [2,] 6 10 ## [3,] 7 11 ## [4,] 8 12 You can subset both rows and columns:\nmat[1:2, 2:3] ## [,1] [,2] ## [1,] 5 9 ## [2,] 6 10 We can convert matrices into data frames using the function as.data.frame:\nas.data.frame(mat) ## V1 V2 V3 ## 1 1 5 9 ## 2 2 6 10 ## 3 3 7 11 ## 4 4 8 12 You can also use single square brackets ([) to access rows and columns of a data frame:\ndata(\u0026quot;murders\u0026quot;) murders[25, 1] ## [1] \u0026quot;Mississippi\u0026quot; murders[2:3, ] ## state abb region population total ## 2 Alaska AK West 710231 19 ## 3 Arizona AZ West 6392017 232 TRY IT\nLoad the US murders dataset.  library(dslabs) data(murders) Use the function str to examine the structure of the murders object. Which of the following best describes the variables represented in this data frame?\nThe 51 states. The murder rates for all 50 states and DC. The state name, the abbreviation of the state name, the state’s region, and the state’s population and total number of murders for 2010. str shows no relevant information.  What are the column names used by the data frame for these five variables?\n Use the accessor $ to extract the state abbreviations and assign them to the object a. What is the class of this object?\n Now use the square brackets to extract the state abbreviations and assign them to the object b. Use the identical function to determine if a and b are the same.\n We saw that the region column stores a factor. You can corroborate this by typing:\n  class(murders$region) With one line of code, use the function levels and length to determine the number of regions defined by this dataset.\nThe function table takes a vector and returns the frequency of each element. You can quickly see how many states are in each region by applying this function. Use this function in one line of code to create a table of states per region.     Vectors In R, the most basic objects available to store data are vectors. As we have seen, complex datasets can usually be broken down into components that are vectors. For example, in a data frame, each column is a vector. Here we learn more about this important class.\nCreating vectors We can create vectors using the function c, which stands for concatenate. We use c to concatenate entries in the following way:\ncodes \u0026lt;- c(380, 124, 818) codes ## [1] 380 124 818 We can also create character vectors. We use the quotes to denote that the entries are characters rather than variable names.\ncountry \u0026lt;- c(\u0026quot;italy\u0026quot;, \u0026quot;canada\u0026quot;, \u0026quot;egypt\u0026quot;) In R you can also use single quotes:\ncountry \u0026lt;- c(\u0026#39;italy\u0026#39;, \u0026#39;canada\u0026#39;, \u0026#39;egypt\u0026#39;) But be careful not to confuse the single quote ’ with the back quote, which shares a keyboard key with ~.\nBy now you should know that if you type:\ncountry \u0026lt;- c(italy, canada, egypt) you receive an error because the variables italy, canada, and egypt are not defined. If we do not use the quotes, R looks for variables with those names and returns an error.\n Names Sometimes it is useful to name the entries of a vector. For example, when defining a vector of country codes, we can use the names to connect the two:\ncodes \u0026lt;- c(italy = 380, canada = 124, egypt = 818) codes ## italy canada egypt ## 380 124 818 The object codes continues to be a numeric vector:\nclass(codes) ## [1] \u0026quot;numeric\u0026quot; but with names:\nnames(codes) ## [1] \u0026quot;italy\u0026quot; \u0026quot;canada\u0026quot; \u0026quot;egypt\u0026quot; If the use of strings without quotes looks confusing, know that you can use the quotes as well:\ncodes \u0026lt;- c(\u0026quot;italy\u0026quot; = 380, \u0026quot;canada\u0026quot; = 124, \u0026quot;egypt\u0026quot; = 818) codes ## italy canada egypt ## 380 124 818 There is no difference between this function call and the previous one. This is one of the many ways in which R is quirky compared to other languages.\nWe can also assign names using the names functions:\ncodes \u0026lt;- c(380, 124, 818) country \u0026lt;- c(\u0026quot;italy\u0026quot;,\u0026quot;canada\u0026quot;,\u0026quot;egypt\u0026quot;) names(codes) \u0026lt;- country codes ## italy canada egypt ## 380 124 818  Sequences Another useful function for creating vectors generates sequences:\nseq(1, 10) ## [1] 1 2 3 4 5 6 7 8 9 10 The first argument defines the start, and the second defines the end which is included. The default is to go up in increments of 1, but a third argument lets us tell it how much to jump by:\nseq(1, 10, 2) ## [1] 1 3 5 7 9 If we want consecutive integers, we can use the following shorthand:\n1:10 ## [1] 1 2 3 4 5 6 7 8 9 10 When we use these functions, R produces integers, not numerics, because they are typically used to index something:\nclass(1:10) ## [1] \u0026quot;integer\u0026quot; However, if we create a sequence including non-integers, the class changes:\nclass(seq(1, 10, 0.5)) ## [1] \u0026quot;numeric\u0026quot;  Subsetting We use square brackets to access specific elements of a vector. For the vector codes we defined above, we can access the second element using:\ncodes[2] ## canada ## 124 You can get more than one entry by using a multi-entry vector as an index:\ncodes[c(1,3)] ## italy egypt ## 380 818 The sequences defined above are particularly useful if we want to access, say, the first two elements:\ncodes[1:2] ## italy canada ## 380 124 If the elements have names, we can also access the entries using these names. Below are two examples.\ncodes[\u0026quot;canada\u0026quot;] ## canada ## 124 codes[c(\u0026quot;egypt\u0026quot;,\u0026quot;italy\u0026quot;)] ## egypt italy ## 818 380   Coercion In general, coercion is an attempt by R to be flexible with data types. When an entry does not match the expected, some of the prebuilt R functions try to guess what was meant before throwing an error. This can also lead to confusion. Failing to understand coercion can drive programmers crazy when attempting to code in R since it behaves quite differently from most other languages in this regard. Let’s learn about it with some examples.\nWe said that vectors must be all of the same type. So if we try to combine, say, numbers and characters, you might expect an error:\nx \u0026lt;- c(1, \u0026quot;canada\u0026quot;, 3) But we don’t get one, not even a warning! What happened? Look at x and its class:\nx ## [1] \u0026quot;1\u0026quot; \u0026quot;canada\u0026quot; \u0026quot;3\u0026quot; class(x) ## [1] \u0026quot;character\u0026quot; R coerced the data into characters. It guessed that because you put a character string in the vector, you meant the 1 and 3 to actually be character strings \"1\" and “3”. The fact that not even a warning is issued is an example of how coercion can cause many unnoticed errors in R.\nR also offers functions to change from one type to another. For example, you can turn numbers into characters with:\nx \u0026lt;- 1:5 y \u0026lt;- as.character(x) y ## [1] \u0026quot;1\u0026quot; \u0026quot;2\u0026quot; \u0026quot;3\u0026quot; \u0026quot;4\u0026quot; \u0026quot;5\u0026quot; You can turn it back with as.numeric:\nas.numeric(y) ## [1] 1 2 3 4 5 This function is actually quite useful since datasets that include numbers as character strings are common.\nNot availables (NA) This “topic” seems to be wholly unappreciated and it has been our experience that students often panic when encountering an NA. This often happens when a function tries to coerce one type to another and encounters an impossible case. In such circumstances, R usually gives us a warning and turns the entry into a special value called an NA (for “not available”). For example:\nx \u0026lt;- c(\u0026quot;1\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;3\u0026quot;) as.numeric(x) ## Warning: NAs introduced by coercion ## [1] 1 NA 3 R does not have any guesses for what number you want when you type b, so it does not try.\nWhile coercion is a common case leading to NAs, you’ll see them in nearly every real-world dataset. Most often, you will encounter the NAs as a stand-in for missing data. Again, this a common problem in real-world datasets and you need to be aware that it will come up.\n  Sorting Now that we have mastered some basic R knowledge (ha!), let’s try to gain some insights into the safety of different states in the context of gun murders.\nsort Say we want to rank the states from least to most gun murders. The function sort sorts a vector in increasing order. We can therefore see the largest number of gun murders by typing:\nlibrary(dslabs) data(murders) sort(murders$total) ## [1] 2 4 5 5 7 8 11 12 12 16 19 21 22 27 32 ## [16] 36 38 53 63 65 67 84 93 93 97 97 99 111 116 118 ## [31] 120 135 142 207 219 232 246 250 286 293 310 321 351 364 376 ## [46] 413 457 517 669 805 1257 However, this does not give us information about which states have which murder totals. For example, we don’t know which state had 1257.\n order The function order is closer to what we want. It takes a vector as input and returns the vector of indexes that sorts the input vector. This may sound confusing so let’s look at a simple example. We can create a vector and sort it:\nx \u0026lt;- c(31, 4, 15, 92, 65) sort(x) ## [1] 4 15 31 65 92 Rather than sort the input vector, the function order returns the index that sorts input vector:\nindex \u0026lt;- order(x) x[index] ## [1] 4 15 31 65 92 This is the same output as that returned by sort(x). If we look at this index, we see why it works:\nx ## [1] 31 4 15 92 65 order(x) ## [1] 2 3 1 5 4 The second entry of x is the smallest, so order(x) starts with 2. The next smallest is the third entry, so the second entry is 3 and so on.\nHow does this help us order the states by murders? First, remember that the entries of vectors you access with $ follow the same order as the rows in the table. For example, these two vectors containing state names and abbreviations, respectively, are matched by their order:\nmurders$state[1:6] ## [1] \u0026quot;Alabama\u0026quot; \u0026quot;Alaska\u0026quot; \u0026quot;Arizona\u0026quot; \u0026quot;Arkansas\u0026quot; \u0026quot;California\u0026quot; ## [6] \u0026quot;Colorado\u0026quot; murders$abb[1:6] ## [1] \u0026quot;AL\u0026quot; \u0026quot;AK\u0026quot; \u0026quot;AZ\u0026quot; \u0026quot;AR\u0026quot; \u0026quot;CA\u0026quot; \u0026quot;CO\u0026quot; This means we can order the state names by their total murders. We first obtain the index that orders the vectors according to murder totals and then index the state names vector:\nind \u0026lt;- order(murders$total) murders$abb[ind] ## [1] \u0026quot;VT\u0026quot; \u0026quot;ND\u0026quot; \u0026quot;NH\u0026quot; \u0026quot;WY\u0026quot; \u0026quot;HI\u0026quot; \u0026quot;SD\u0026quot; \u0026quot;ME\u0026quot; \u0026quot;ID\u0026quot; \u0026quot;MT\u0026quot; \u0026quot;RI\u0026quot; \u0026quot;AK\u0026quot; \u0026quot;IA\u0026quot; \u0026quot;UT\u0026quot; \u0026quot;WV\u0026quot; \u0026quot;NE\u0026quot; ## [16] \u0026quot;OR\u0026quot; \u0026quot;DE\u0026quot; \u0026quot;MN\u0026quot; \u0026quot;KS\u0026quot; \u0026quot;CO\u0026quot; \u0026quot;NM\u0026quot; \u0026quot;NV\u0026quot; \u0026quot;AR\u0026quot; \u0026quot;WA\u0026quot; \u0026quot;CT\u0026quot; \u0026quot;WI\u0026quot; \u0026quot;DC\u0026quot; \u0026quot;OK\u0026quot; \u0026quot;KY\u0026quot; \u0026quot;MA\u0026quot; ## [31] \u0026quot;MS\u0026quot; \u0026quot;AL\u0026quot; \u0026quot;IN\u0026quot; \u0026quot;SC\u0026quot; \u0026quot;TN\u0026quot; \u0026quot;AZ\u0026quot; \u0026quot;NJ\u0026quot; \u0026quot;VA\u0026quot; \u0026quot;NC\u0026quot; \u0026quot;MD\u0026quot; \u0026quot;OH\u0026quot; \u0026quot;MO\u0026quot; \u0026quot;LA\u0026quot; \u0026quot;IL\u0026quot; \u0026quot;GA\u0026quot; ## [46] \u0026quot;MI\u0026quot; \u0026quot;PA\u0026quot; \u0026quot;NY\u0026quot; \u0026quot;FL\u0026quot; \u0026quot;TX\u0026quot; \u0026quot;CA\u0026quot; According to the above, California had the most murders.\n max and which.max If we are only interested in the entry with the largest value, we can use max for the value:\nmax(murders$total) ## [1] 1257 and which.max for the index of the largest value:\ni_max \u0026lt;- which.max(murders$total) murders$state[i_max] ## [1] \u0026quot;California\u0026quot; For the minimum, we can use min and which.min in the same way.\nDoes this mean California is the most dangerous state? In an upcoming section, we argue that we should be considering rates instead of totals. Before doing that, we introduce one last order-related function: rank.\n rank Although not as frequently used as order and sort, the function rank is also related to order and can be useful. For any given vector it returns a vector with the rank of the first entry, second entry, etc., of the input vector. Here is a simple example:\nx \u0026lt;- c(31, 4, 15, 92, 65) rank(x) ## [1] 3 1 2 5 4 To summarize, let’s look at the results of the three functions we have introduced:\n  original  sort  order  rank      31  4  2  3    4  15  3  1    15  31  1  2    92  65  5  5    65  92  4  4      Beware of recycling Another common source of unnoticed errors in R is the use of recycling. We saw that vectors are added elementwise. So if the vectors don’t match in length, it is natural to assume that we should get an error. But we don’t. Notice what happens:\nx \u0026lt;- c(1,2,3) y \u0026lt;- c(10, 20, 30, 40, 50, 60, 70) x+y ## Warning in x + y: longer object length is not a multiple of shorter object ## length ## [1] 11 22 33 41 52 63 71 We do get a warning, but no error. For the output, R has recycled the numbers in x. Notice the last digit of numbers in the output.\nTRY IT\nFor these exercises we will use the US murders dataset. Make sure you load it prior to starting.\nlibrary(dslabs) data(\u0026quot;murders\u0026quot;) Use the $ operator to access the population size data and store it as the object pop. Then use the sort function to redefine pop so that it is sorted. Finally, use the [ operator to report the smallest population size.\n Now instead of the smallest population size, find the index of the entry with the smallest population size. Hint: use order instead of sort.\n We can actually perform the same operation as in the previous exercise using the function which.min. Write one line of code that does this.\n Now we know how small the smallest state is and we know which row represents it. Which state is it? Define a variable states to be the state names from the murders data frame. Report the name of the state with the smallest population.\n You can create a data frame using the data.frame function. Here is a quick example:\n  temp \u0026lt;- c(35, 88, 42, 84, 81, 30) city \u0026lt;- c(\u0026quot;Beijing\u0026quot;, \u0026quot;Lagos\u0026quot;, \u0026quot;Paris\u0026quot;, \u0026quot;Rio de Janeiro\u0026quot;, \u0026quot;San Juan\u0026quot;, \u0026quot;Toronto\u0026quot;) city_temps \u0026lt;- data.frame(name = city, temperature = temp) Use the rank function to determine the population rank of each state from smallest population size to biggest. Save these ranks in an object called ranks, then create a data frame with the state name and its rank. Call the data frame my_df.\nRepeat the previous exercise, but this time order my_df so that the states are ordered from least populous to most populous. Hint: create an object ind that stores the indexes needed to order the population values. Then use the bracket operator [ to re-order each column in the data frame.\n The na_example vector represents a series of counts. You can quickly examine the object using:\n  data(\u0026quot;na_example\u0026quot;) str(na_example) ## int [1:1000] 2 1 3 2 1 3 1 4 3 2 ... However, when we compute the average with the function mean, we obtain an NA:\nmean(na_example) ## [1] NA The is.na function returns a logical vector that tells us which entries are NA. Assign this logical vector to an object called ind and determine how many NAs does na_example have.\nNow compute the average again, but only for the entries that are not NA. Hint: remember the ! operator.     Vector arithmetics California had the most murders, but does this mean it is the most dangerous state? What if it just has many more people than any other state? We can quickly confirm that California indeed has the largest population:\nlibrary(dslabs) data(\u0026quot;murders\u0026quot;) murders$state[which.max(murders$population)] ## [1] \u0026quot;California\u0026quot; with over 37 million inhabitants. It is therefore unfair to compare the totals if we are interested in learning how safe the state is. What we really should be computing is the murders per capita. The reports we describe in the motivating section used murders per 100,000 as the unit. To compute this quantity, the powerful vector arithmetic capabilities of R come in handy.\nRescaling a vector In R, arithmetic operations on vectors occur element-wise. For a quick example, suppose we have height in inches:\ninches \u0026lt;- c(69, 62, 66, 70, 70, 73, 67, 73, 67, 70) and want to convert to centimeters. Notice what happens when we multiply inches by 2.54:\ninches * 2.54 ## [1] 175.26 157.48 167.64 177.80 177.80 185.42 170.18 185.42 170.18 177.80 In the line above, we multiplied each element by 2.54. Similarly, if for each entry we want to compute how many inches taller or shorter than 69 inches, the average height for males, we can subtract it from every entry like this:\ninches - 69 ## [1] 0 -7 -3 1 1 4 -2 4 -2 1  Two vectors If we have two vectors of the same length, and we sum them in R, they will be added entry by entry as follows:\n\\[ \\begin{pmatrix} a\\\\ b\\\\ c\\\\ d \\end{pmatrix} + \\begin{pmatrix} e\\\\ f\\\\ g\\\\ h \\end{pmatrix} = \\begin{pmatrix} a +e\\\\ b + f\\\\ c + g\\\\ d + h \\end{pmatrix} \\]\nThe same holds for other mathematical operations, such as -, * and /.\nThis implies that to compute the murder rates we can simply type:\nmurder_rate \u0026lt;- murders$total / murders$population * 100000 Once we do this, we notice that California is no longer near the top of the list. In fact, we can use what we have learned to order the states by murder rate:\nmurders$abb[order(murder_rate)] ## [1] \u0026quot;VT\u0026quot; \u0026quot;NH\u0026quot; \u0026quot;HI\u0026quot; \u0026quot;ND\u0026quot; \u0026quot;IA\u0026quot; \u0026quot;ID\u0026quot; \u0026quot;UT\u0026quot; \u0026quot;ME\u0026quot; \u0026quot;WY\u0026quot; \u0026quot;OR\u0026quot; \u0026quot;SD\u0026quot; \u0026quot;MN\u0026quot; \u0026quot;MT\u0026quot; \u0026quot;CO\u0026quot; \u0026quot;WA\u0026quot; ## [16] \u0026quot;WV\u0026quot; \u0026quot;RI\u0026quot; \u0026quot;WI\u0026quot; \u0026quot;NE\u0026quot; \u0026quot;MA\u0026quot; \u0026quot;IN\u0026quot; \u0026quot;KS\u0026quot; \u0026quot;NY\u0026quot; \u0026quot;KY\u0026quot; \u0026quot;AK\u0026quot; \u0026quot;OH\u0026quot; \u0026quot;CT\u0026quot; \u0026quot;NJ\u0026quot; \u0026quot;AL\u0026quot; \u0026quot;IL\u0026quot; ## [31] \u0026quot;OK\u0026quot; \u0026quot;NC\u0026quot; \u0026quot;NV\u0026quot; \u0026quot;VA\u0026quot; \u0026quot;AR\u0026quot; \u0026quot;TX\u0026quot; \u0026quot;NM\u0026quot; \u0026quot;CA\u0026quot; \u0026quot;FL\u0026quot; \u0026quot;TN\u0026quot; \u0026quot;PA\u0026quot; \u0026quot;AZ\u0026quot; \u0026quot;GA\u0026quot; \u0026quot;MS\u0026quot; \u0026quot;MI\u0026quot; ## [46] \u0026quot;DE\u0026quot; \u0026quot;SC\u0026quot; \u0026quot;MD\u0026quot; \u0026quot;MO\u0026quot; \u0026quot;LA\u0026quot; \u0026quot;DC\u0026quot; TRY IT\nPreviously we created this data frame:  temp \u0026lt;- c(35, 88, 42, 84, 81, 30) city \u0026lt;- c(\u0026quot;Beijing\u0026quot;, \u0026quot;Lagos\u0026quot;, \u0026quot;Paris\u0026quot;, \u0026quot;Rio de Janeiro\u0026quot;, \u0026quot;San Juan\u0026quot;, \u0026quot;Toronto\u0026quot;) city_temps \u0026lt;- data.frame(name = city, temperature = temp) Remake the data frame using the code above, but add a line that converts the temperature from Fahrenheit to Celsius. The conversion is \\(C = \\frac{5}{9} \\times (F - 32)\\).\nWrite code to compute the following sum \\(1+1/2^2 + 1/3^2 + \\dots 1/100^2\\)? Hint: thanks to Euler, we know it should be close to \\(\\pi^2/6\\).\n Compute the per 100,000 murder rate for each state and store it in the object murder_rate. Then compute the average murder rate for the US using the function mean. What is the average?\n     Indexing Indexing is a boring name for an important tool. R provides a powerful and convenient way of referencing specific elements of vectors. We can, for example, subset a vector based on properties of another vector. In this section, we continue working with our US murders example, which we can load like this:\nlibrary(dslabs) data(\u0026quot;murders\u0026quot;) Subsetting with logicals We have now calculated the murder rate using:\nmurder_rate \u0026lt;- murders$total / murders$population * 100000 Imagine you are moving from Italy where, according to an ABC news report, the murder rate is only 0.71 per 100,000. You would prefer to move to a state with a similar murder rate. Another powerful feature of R is that we can use logicals to index vectors. If we compare a vector to a single number, it actually performs the test for each entry. The following is an example related to the question above:\nind \u0026lt;- murder_rate \u0026lt; 0.71 If we instead want to know if a value is less or equal, we can use:\nind \u0026lt;- murder_rate \u0026lt;= 0.71 Note that we get back a logical vector with TRUE for each entry smaller than or equal to 0.71. To see which states these are, we can leverage the fact that vectors can be indexed with logicals.\nmurders$state[ind] ## [1] \u0026quot;Hawaii\u0026quot; \u0026quot;Iowa\u0026quot; \u0026quot;New Hampshire\u0026quot; \u0026quot;North Dakota\u0026quot; ## [5] \u0026quot;Vermont\u0026quot; In order to count how many are TRUE, the function sum returns the sum of the entries of a vector and logical vectors get coerced to numeric with TRUE coded as 1 and FALSE as 0. Thus we can count the states using:\nsum(ind) ## [1] 5  Logical operators Suppose we like the mountains and we want to move to a safe state in the western region of the country. We want the murder rate to be at most 1. In this case, we want two different things to be true. Here we can use the logical operator and, which in R is represented with \u0026amp;. This operation results in TRUE only when both logicals are TRUE. To see this, consider this example:\nTRUE \u0026amp; TRUE ## [1] TRUE TRUE \u0026amp; FALSE ## [1] FALSE FALSE \u0026amp; FALSE ## [1] FALSE For our example, we can form two logicals:\nwest \u0026lt;- murders$region == \u0026quot;West\u0026quot; safe \u0026lt;- murder_rate \u0026lt;= 1 and we can use the \u0026amp; to get a vector of logicals that tells us which states satisfy both conditions:\nind \u0026lt;- safe \u0026amp; west murders$state[ind] ## [1] \u0026quot;Hawaii\u0026quot; \u0026quot;Idaho\u0026quot; \u0026quot;Oregon\u0026quot; \u0026quot;Utah\u0026quot; \u0026quot;Wyoming\u0026quot;  which Suppose we want to look up California’s murder rate. For this type of operation, it is convenient to convert vectors of logicals into indexes instead of keeping long vectors of logicals. The function which tells us which entries of a logical vector are TRUE. So we can type:\nind \u0026lt;- which(murders$state == \u0026quot;California\u0026quot;) murder_rate[ind] ## [1] 3.374138  match If instead of just one state we want to find out the murder rates for several states, say New York, Florida, and Texas, we can use the function match. This function tells us which indexes of a second vector match each of the entries of a first vector:\nind \u0026lt;- match(c(\u0026quot;New York\u0026quot;, \u0026quot;Florida\u0026quot;, \u0026quot;Texas\u0026quot;), murders$state) ind ## [1] 33 10 44 Now we can look at the murder rates:\nmurder_rate[ind] ## [1] 2.667960 3.398069 3.201360  %in% If rather than an index we want a logical that tells us whether or not each element of a first vector is in a second, we can use the function %in%. Let’s imagine you are not sure if Boston, Dakota, and Washington are states. You can find out like this:\nc(\u0026quot;Boston\u0026quot;, \u0026quot;Dakota\u0026quot;, \u0026quot;Washington\u0026quot;) %in% murders$state ## [1] FALSE FALSE TRUE Note that we will be using %in% often throughout the book.\nAdvanced: There is a connection between match and %in% through which. To see this, notice that the following two lines produce the same index (although in different order):\nmatch(c(\u0026quot;New York\u0026quot;, \u0026quot;Florida\u0026quot;, \u0026quot;Texas\u0026quot;), murders$state) ## [1] 33 10 44 which(murders$state%in%c(\u0026quot;New York\u0026quot;, \u0026quot;Florida\u0026quot;, \u0026quot;Texas\u0026quot;)) ## [1] 10 33 44   Rmarkdown If you’re new to Rmarkdown, I have made a short video on how to use it . This video is for my EC420 course, but works for us as well.\nEXERCISES\nStart by loading the library and data.\nlibrary(dslabs) data(murders) Compute the per 100,000 murder rate for each state and store it in an object called murder_rate. Then use logical operators to create a logical vector named low that tells us which entries of murder_rate are lower than 1.\n Now use the results from the previous exercise and the function which to determine the indices of murder_rate associated with values lower than 1.\n Use the results from the previous exercise to report the names of the states with murder rates lower than 1.\n Now extend the code from exercises 2 and 3 to report the states in the Northeast with murder rates lower than 1. Hint: use the previously defined logical vector low and the logical operator \u0026amp;.\n In a previous exercise we computed the murder rate for each state and the average of these numbers. How many states are below the average?\n Use the match function to identify the states with abbreviations AK, MI, and IA. Hint: start by defining an index of the entries of murders$abb that match the three abbreviations, then use the [ operator to extract the states.\n Use the %in% operator to create a logical vector that answers the question: which of the following are actual abbreviations: MA, ME, MI, MO, MU?\n Extend the code you used in exercise 7 to report the one entry that is not an actual abbreviation. Hint: use the ! operator, which turns FALSE into TRUE and vice versa, then which to obtain an index.\n    Lecture Video Video from lecture hosted on Mediaspace \n   https://rstudio.cloud↩︎\n https://rafalab.github.io/dsbook/installing-r-rstudio.html↩︎\n http://abcnews.go.com/blogs/headlines/2012/12/us-gun-ownership-homicide-rate-higher-than-other-developed-countries/↩︎\n I’m especially partial to Puerto Rico.↩︎\n This is, without a doubt, my least favorite aspect of R. I’d even venture to call it stupid. The logic behind this pesky \u0026lt;- is a total mystery to me, but there is logic to avoiding =. But, you do you.↩︎\n This equals sign is the reasons we assign values with \u0026lt;-; then when arguments of a function are assigned values, we don’t end up with multiple equals signs. But… who cares.↩︎\n Whether you view this as a feature or a bug is a good indicator whether you’ll enjoy working with R.↩︎\n   ","date":1609286400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1629148116,"objectID":"9be773bd8dbb1773f9326846c039d666","permalink":"https://ec404.netlify.app/content/00-content/","publishdate":"2020-12-30T00:00:00Z","relpermalink":"/content/00-content/","section":"content","summary":"Readings A Brief Introduction to SSC442  About Me About You This Course More About This Course And finally… Guiding Questions  What is “Data Analytics”?  Starting point for this course  Statistical Learning The Pros and Cons of Correlation A Case Study in Prediction More Recent Examples of Prediction An Aside: Nomenclature Learning from Data   R basics  Case study: US homicides by firearm The (very) basics  Objects The workspace Functions Other prebuilt objects Variable names Saving your workspace Motivating scripts Commenting your code  Data types  Data frames Examining an object The accessor: $ Vectors: numerics, characters, and logical Factors Lists Matrices  Vectors  Creating vectors Names Sequences Subsetting  Coercion  Not availables (NA)  Sorting  sort order max and which.","tags":null,"title":"Welcome Back to R","type":"docs"},{"authors":null,"categories":null,"content":"   Course Times and Key Links WHAT IS THIS COURSE, AND CAN/SHOULD YOU TAKE IT? NON-DETAILED COURSE PSUEDO-DESCRIPTION PROBLEM SETS  CONTACTING ME  SUCCESS IN THIS COURSE EVALUATIONS AND GRADES ACADEMIC HONESTY RESOURCES  Accommodations Mental Health and Wellbeing Mandated Reporting  MISCELLANEA  Using Office Hours Letters of Recommendation / References    Course Times and Key Links Forthcoming.\n WHAT IS THIS COURSE, AND CAN/SHOULD YOU TAKE IT? This course will introduce students to decades of psychological research indicating systematic departures from classical economic assumptions. Furthermore, this course will demonstrate how that research can be translated into formal models that can be incorporated into economics. Topics include ways utility theory can be improved—such as incorporating reference dependence, social preferences, self image, and other belief-based tastes—and ways we can relax assumptions of perfect rationality—such as incorporating focusing effects, limited attention, biased prediction of future tastes, present-biased preferences, and biases in probabilistic judgment. The course will emphasize (a) careful interpretation of new evidence, (b) formalizing this evidence into models that can, with discipline and rigor, generate sharp predictions using traditional economic approaches, and (c) exploring economic implications of those models presented. Although the course will primarily emphasize (b), it is intended to be useful to students whose interests lie anywhere in this spectrum.\nThe course is intended for students in the Economics program and others who have a solid background in microeconomic theory at the level of intermediate courses in these programs. This course contains material and approaches targeted at those in the economics major. In this course, you will be required to use a fair amount of algebra and some elementary calculus, which demands that you can take derivatives and derive an optimum.\n Enrollment for credit in this course is simply not suitable for those unprepared in or uninterested in economic theory no matter the intensity of interest in psychology or behavioral economics. Really.\n The course focuses on a mix of formal modeling and a careful review of existing evidence. The course will involve more words and more intuition and more classical economic theory than the typical topics course.\nThe topics covered in this course are listed later in the syllabus. There is no textbook for the course. When available, I will give links to papers that contain the formal models, but I will not require that you read those papers. The important thing to remember is that, since there is no book for this course, you will rely on your course notes much more than you might in other classes. I cannot emphasize this enough: learning from course materials is extremely hard if you are not present during the initial presentation of those materials. Thus, you are much more likely to succeed if you attend class.\nIf—after you have read the syllabus—you have any questions about whether this course is appropriate for you, please come talk to me. Guests are always permitted to attend the lectures (I may ask you to introduce them).\n NON-DETAILED COURSE PSUEDO-DESCRIPTION This course is designed as an introduction to modeling psychological phenomena that are not yet totally integrated into mainstream economic analysis. Thus the material in this course is not entirely like what you’ve seen in most of your other economics courses. But it is not an alternative to mainstream economics. It is only about improving the psychological realism of formal economics, and we will use classical economic approaches to improve our answers to classical economic questions. Most topics will be introduced by first going through the classical model, then highlighting empirical findings that do not fit with that model, and finally exploring alternative approaches. Like all other courses, this course does not cover all topics that might be of interest, and we will not spend time exploring methodological issues. However, as undergraduates studying the field of economics, methodology can and should be your primary focus. Economic methodology will provide the backbone for your future careers and, should you choose to pursue it, any graduate work in economics.\nThis course is\n not about non-psychological models of bounded rationality  We won’t consider models of bounded rationality (based on computer science, artificial intelligence, etc.) that are meant to capture cognitive limits of economic actors, but not based on evidence that humans think this way. In some arenas I think it makes tremendous sense to focus on these alternative models of bounded rationality, and more generally this can be a very useful research agenda. But that’s not what this course is about. We will consider those models based on research inspired by the empirical evidence of what humans are like.\n not about experimental economics as such  We will examine the experimental evidence of the topics covered in this course. But the course won’t be about experimental methods per se. This course is meant to use the results from experiments to motivate new economic assumptions, and to emphasize the potential for non-experimental research in these topics. We won’t study experiments testing economic institutions in the laboratory, except insofar as they are either motivated by or informative about the underlying psychology of economic actors.\n absolutely not an alternative to mainstream economics  In the most important senses, the course won’t at all be a departure from mainstream economics. I believe that the best way for economists to do economics in general, and the best way for us to use this material in particular, is with careful formal theory and (albeit absent from this course) statistical analysis. In these regards, the course will be purposely, pointedly, persistently, proudly, and ponderously mainstream.\n PROBLEM SETS The primary mode of learning in this course is through (difficult) problem sets.\nThere will be six problem sets. Problems will range in difficulty from moderately hard to impossibly, annoyingly hard, so don’t panic if you struggle with them. You are encouraged to work together on the problem sets, but you are not allowed to read others’ answers from past or present problem sets, and should hand in solutions separately that reflect your own understanding. You should acknowledge collaborators and describe the extent of collaboration at the top of the relevant problem sets. While collaboration is allowed, directly copying someone else’s work is not.\nProblem sets are due at the beginning of lecture the day they are due. Late problem sets will not be accepted. Please staple your problem set together (paper clips and folded corners are not staples). If you cannot attend lecture the day a problem set is due, you can turn it in to either my office or the TA’s office.\nThere is a limited amount of time we can spend grading the problem sets. Problems will frequently require substantial math; you are welcome to hand in all the work you did to reach an answer, but that is not required. Clearly indicate your answer by labeling (if typed) or circling (if handwritten). You will not receive feedback on your problem sets, but you will receive an answer sheet.\nProblem sets will be graded either a 4,8, or 10. Problem sets that are late will be given a 0. We will grade problem sets in the most forgiving way possible. However, lengthy explanations of how you arrived at a wrong answer will not necessarily entitle you to full credit, regardless of the length. A good-faith effort will generally earn you an 8; correct answers will earn a 10.\nIn the end, problem sets aren’t a big component of your grade. Their primary purpose is to teach you the actual material and to prepare you for exams—hence the relaxed grading and feedback. There will be two midterms and a final exam (see next page). These will draw heavily from the problem sets, and therefore a deep understanding of the problem sets is the best way to succeed in this course. I may even repeat questions directly from problem sets onto an exam…\nCONTACTING ME I have moved this up front in a (likely unsuccessful) attempt to minimize our collective headache.\nEmail is a blessing and a curse. Instant communication is wonderful, but often email is the wrong medium to have a productive conversation about course material. Moreover, I get a lot of emails. This means that I am frequently triaging emails into two piles: “my house is burning down” and “everything else”. Your email is unlikely to make the former pile. So, asking questions about course material is always best done in-class or in office hours. Students always roll their eyes when professors say things like that, but it’s true that if you have a question, it’s very likely someone else has the same question.\nThat said, it benefits us both if any emails you send are clear and effective. There’s an (unfunny) joke in academia that professors (i) read an email until they find a question; (ii) respond to that question and; (iii) ignore the rest of the email. I won’t do this, but I think it is helpful to assume that the person on the receiving end of an email will operate this way.\nSome general tips:\n Always include [EC404] in your subject line (brackets included). Use a short but informative subject line. For example: [EC404] Midterm Exam Grading Use your University-supplied email for University business. This helps me know who you are. One topic, one email. If you have multiple things to discuss, and you anticipate followup replies, it is best to split them into two emails so that the threads do not get cluttered. Ask direct questions. If you’re asking multiple questions in one email, use a bulleted list. Don’t ask questions that are answered by reading the syllabus. This drives me nuts. I’ve also found that students are overly polite in emails. I suppose it may be intimidating to email a professor, and you should try to match the style that the professor prefers, but I view email for a course as a casual form of communication. Said another way: get to the point. Students often send an entire paragraph introducing themselves, but if you use your University email address, and add the course name in the subject, I will already know who you are. Here’s an example of an excellent email:   Subject: [EC404] Assignment 2 Typo\nHi Prof. Bushong,\nThere seems to be a typo in the assignment on Question 2. The problem says to take a derivative with respect to a variable that doesn’t exist. Can you correct this or specify what you mean?\nThanks, Student McStudentFace\n Now on to your regularly scheduled syllabus.\n  SUCCESS IN THIS COURSE I promise, you are equipped to succeed in this course.\nLearning sucks.\nTrue learning definitionally means you didn’t know something. When it comes to psychological factors, people are often hesitant to say they don’t know something. (Or will insist they do in fact know something when they really don’t.)\nThis can be exacerbated in this class by the intersection of tough psychology and challenging mathematics. In my experience, many students are not proficient with high-school algebra. This isn’t an insult: it means your teachers sucked.\n It’s easy when you start out in this class to get really frustrated and think, “Oh it’s me, I’m really stupid,” or, “I’m just not good at math.” But, that is absolutely not the case. Everyone gets frustrated. It’s just a natural part of learning. Your brain doesn’t want to work: it’s lazy. So, forcing it to exert effort is stressful and, at times, painful. The pain happens to everyone (even the best students) and gets less and less over time. Don’t blame yourself. Just take a break, do something fun, and then come back and try again later.\n  EVALUATIONS AND GRADES Your grade in this course will be based on attendance + participation, assignments, three exams, and a writing project. The general breakdown for grades will be 15% for attendance, 30% for assignments, 45% for exams, and 10% for a “paper”. Details on the paper will be distributed midway through the course – it is designed not to deter anyone from taking this course who might otherwise be interested.\nEach exam will have a variable grading weight, depending on your performance. The ranges of grading weights for each exam are as follows:\n Midterm 1: 5% – 20% Midterm 2: 5% – 20% Final Exam: 10% – 35%  To calculate your overall exam score, I will automatically choose the grading weights most advantageous to you. For example, if the final exam is your best score, then your grading weights will be 35% for the final exam and 5% for each midterm. If the final exam is your worst score, then your grading weights will be 10% for the final exam and 17.5% for each prelim. This scheme will help mitigate the effects of one-time disasters, including poor performance early in the course. I reserve the right to give higher grades, but the above is guaranteed. Any adjustments will be done consistently, with course attendance and completion percentage (e.g., did you do all the assigned work?) serving as tiebreakers where needed.\nAttendance and participation grades will be based on completion of in-class assignments. This is intended to be an easy way to get points.\nMore in-depth descriptions for all the assignments will be on the assignments page. As the course progresses, the assignments themselves will be posted within that page.\nTo Recap:\n   Assignment Points Percent    Class Participation 30 15%  Assignments 60 30%  Exams 90 45%  Paper 20 10%  Total 200 —        Grade Range Grade Range    4.0 92-100% 2.0 72-76%  3.5 87-91% 1.5 67-72%  3.0 82-87% 1.0 62-67%  2.5 77-81% 0.0 bad-66%     All grades are considered final. Any request for a re-grade beyond simple point-tallying mistakes will require that the entire assignment be re-graded. Any points previously awarded may be changed in either direction in the re-grade\n ACADEMIC HONESTY Violation of MSU’s Spartan Code of Honor will result in a grade of 0.0 in the course. Moreover, I am required by MSU policy to report suspected cases of academic dishonesty for possible disciplinary action.1\n RESOURCES Mental health concerns or stressful events may lead to diminished academic performance or reduce a student’s ability to participate in daily activities. Services are available to assist you with addressing these and other concerns you may be experiencing. You can learn more about the broad range of confidential mental health services available on campus via the Counseling \u0026amp; Psychiatric Services (CAPS) website at www.caps.msu.edu.\nAccommodations This class is designed to be fairly accomodating without a student asking. However, if you need a special accommodation for a disability, religious observance, or have any other concerns about your ability to perform well in this course, please contact me immediately so that we can discuss the issue and make appropriate arrangements.\nMichigan State University is committed to providing equal opportunity for participation in all programs, services and activities. Requests for accommodations by persons with disabilities may be made by contacting the Resource Center for Persons with Disabilities at 517-884-RCPD or on the web at here. Once your eligibility for an accommodation has been determined, you will be issued a verified individual services accommodation (“VISA”) form. Please present this form to me at the start of the term and/or two weeks prior to the accommodation date (test, project, etc). Requests received after this date will be honored whenever possible.\n Mental Health and Wellbeing Things for you might be especially hard right now.\nI’m fully committed to making sure that you learn everything you were hoping to learn from this class. I will make whatever accommodations I can to help you finish your exercises, do well on your projects, and learn and understand the class material. Under ordinary conditions, I am flexible and lenient with grading and course expectations when students face difficult challenges. Given the challenges of the past two years, that flexibility and leniency is intensified.\nIf you feel like you’re behind or not understanding everything, do not suffer in silence. Please contact me. I’m available at e-mail.\n Mandated Reporting Materials submitted for this class are generally considered confidential pursuant to the University’s student record policies. However, students should be aware that University employees, including instructors, may not be able to maintain confidentiality when it conflicts with their responsibility to report certain issues to protect the health and safety of MSU community members and others. As the instructor, I must report the following information to other University offices (including the Department of Police and Public Safety) if you share it with me: - Suspected child abuse/neglect, even if this maltreatment happened when you were a child; - Allegations of sexual assault, relationship violence, stalking, or sexual harassment; and - Credible threats of harm to oneself or to others.\nThese reports may trigger contact from a campus official who will want to talk with you about the incident that you have shared. In almost all cases, it will be your decision whether you wish to speak with that individual. If you would like to talk about these events in a more confidential setting, you are encouraged to make an appointment with the MSU Counseling and Psychiatric Services.\n  MISCELLANEA D2L will be used sparingly for submission of assignments and distribution of grades.\nUsing Office Hours Please use my office hours. It would be remarkable if you didn’t need some assistance with the material, and I am here to help. One of the benefits of open office hours is to accommodate many students at once; if fellow students are “in my office”, please join in and feel very free to show up in groups. Office hours will move around a little bit throughout the semester to attempt to meet the needs of all students.\nIn addition to drop-in office hours, I always have sign-up office hours for advising and other purposes. As a general rule, please first seek course-related help from the drop-in office hours. However, if my scheduled office hours are always infeasible for you, let me know, and then I may encourage you to make appointments with me. I ask that you schedule your studying so that you are prepared to ask questions during office hours – office hours are not a lecture and if you’re not prepared with questions we will end up awkwardly staring at each other for an hour until you leave.\nSome gentle requests regarding office hours and on contacting me. First, my office hours end sharply at the end, so don’t arrive 10 minutes before the scheduled end and expect a full session. Please arrive early if you have lengthy questions, or if you don’t want to risk not having time due to others’ questions. You are free to ask me some stuff by e-mail, (e.g. a typo or something on a handout), but please know e-mail sucks for answering many types of questions. “How do I do this assignment?” or “What’s up with calculus?” are short questions with long answers. Come to office hours.\n Letters of Recommendation / References If you are applying for further study or another pursuit that requires letters of recommendation and you’d like me to recommend you, I will only write a letter on your behalf if your final grade is a 4.0. In addition, you should have held at least three substantial conversations with me about the course material or other academic subjects over the course of the semester. Please ask if you’re concerned about this. I’m not an asshole—it’s better for you if I know you well before writing a letter.\n   So just don’t cheat or plagiarize. This is an easy problem to avoid.↩︎\n   ","date":1609027200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1629148116,"objectID":"e4d5a4a79239f08c6ad0d7cbf1be756c","permalink":"https://ec404.netlify.app/syllabus/","publishdate":"2020-12-27T00:00:00Z","relpermalink":"/syllabus/","section":"","summary":"Course Times and Key Links WHAT IS THIS COURSE, AND CAN/SHOULD YOU TAKE IT? NON-DETAILED COURSE PSUEDO-DESCRIPTION PROBLEM SETS  CONTACTING ME  SUCCESS IN THIS COURSE EVALUATIONS AND GRADES ACADEMIC HONESTY RESOURCES  Accommodations Mental Health and Wellbeing Mandated Reporting  MISCELLANEA  Using Office Hours Letters of Recommendation / References    Course Times and Key Links Forthcoming.\n WHAT IS THIS COURSE, AND CAN/SHOULD YOU TAKE IT?","tags":null,"title":"Syllabus","type":"page"},{"authors":null,"categories":null,"content":"  Below is a roadmap for the semester. Note that this will inevitably change from the first day you access this course.\nOverview The class is fundamentally based on lectures. The slides for the lectures can be found at the “content” page. Everything else should be relatively self-explanatory.\n Content (): This page contains the lectures and recorded videos (as applicable) for the topic. These pages should be read completely. Lectures are not an exact replication of the written content; on the contrary, the lectures are intended to keep you engaged and have a great deal more information than the slides alone. Come to class.\n Assignments (): This page contains the instructions for assignments. Assignments are always due before 11:59 PM (Eastern).\n     Programming Foundations Content Example Assignment   Week 0 (30 August) (Re-) Introduction to R      Week 1 (6 September) Programming Basics, the tidyverse, and Visualization         Week 2 (13 September) Visualization II         Week 3 (20 September) Visualization III       Data Analysis Foundations Content Example Assignment   Week 4 (27 September) Probability and Statistics in R         3 October  Project 1 Due         Week 5 (4 October) Linear Regression I         Week 6 (11 October) Linear Regression II         Week 7 (18 October) Linear Regression III          Applications of Data Analysis Content Example Assignment   Week 8 (25 October) Bias vs Variance         Week 9 (1 November) Nonlinear Regression         7 November  Project 2 Due         Week 10 (8 November) Classification         Week 11 (15 November) Wrangling Data          Further Extensions Content Example Assignment   Week 12 (22 November) Geospatial Data in R         Week 12 (29 November) Text as Data         Week 14 (6 December) Advanced Topics and Analyses          Conclusions Content Example Assignment   14 December, 11:59 PM Eastern  Final Project Due          ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1629137504,"objectID":"3e223d7ba58b0122b42458e4cf52e04c","permalink":"https://ec404.netlify.app/schedule/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/schedule/","section":"","summary":"Below is a roadmap for the semester. Note that this will inevitably change from the first day you access this course.\nOverview The class is fundamentally based on lectures. The slides for the lectures can be found at the “content” page. Everything else should be relatively self-explanatory.\n Content (): This page contains the lectures and recorded videos (as applicable) for the topic. These pages should be read completely.","tags":null,"title":"Schedule","type":"page"}]